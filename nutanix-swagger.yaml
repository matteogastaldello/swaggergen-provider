openapi: 3.0.1
info:
  title: Nutanix NDB
  description: Nutanix NDB REST APIs version 0.9
  version: "0.9"
servers:
- url: /era/v0.9
security:
- era_token: []
- era_auth: []
tags:
- name: Databases
- name: Time Machines
- name: Snapshots
- name: Clones
- name: Profiles
- name: Database Servers
- name: Database Server Physical Clusters
- name: SLAs
- name: Operations
- name: Alerts
- name: NDB Resources
- name: Tags
- name: Clusters
paths:
  /alerts:
    get:
      tags:
      - Alerts
      summary: Get list of all Alerts
      operationId: getAllAlerts
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: resolved
        in: query
        schema:
          type: string
      - name: timeInterval
        in: query
        schema:
          type: string
      - name: summary
        in: query
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERAAlertDTO'
    put:
      tags:
      - Alerts
      summary: Resolve/acknowledge alerts
      description: |
        Resolve/acknowledge one or more alerts
      operationId: updateAlertsBulk
      requestBody:
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateAlertModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERAAlertDTO'
      x-codegen-request-body-name: body
  /alerts/{alertId}:
    get:
      tags:
      - Alerts
      summary: Get Alert by ID
      description: |
        Get an alert detail by ID
      operationId: getAlertById
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: alertId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertDTO'
    put:
      tags:
      - Alerts
      summary: Update an Alert by ID
      operationId: updateAlert
      parameters:
      - name: alertId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateAlertModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertDTO'
      x-codegen-request-body-name: body
  /alerts/policy:
    get:
      tags:
      - Alerts
      summary: Get list of Alert poilicies
      operationId: getAllAlertPolicies
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERAAlertPolicyDTO'
  /alerts/policy/name/{alertPolicyName}:
    get:
      tags:
      - Alerts
      summary: Get Alert policy by name
      operationId: getAlertPolicyByName
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: alertPolicyName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertPolicyDTO'
  /alerts/policy/{alertPolicyId}:
    get:
      tags:
      - Alerts
      summary: Get Alert Policy by ID
      operationId: getAlertPolicyById
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: alertPolicyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertPolicyDTO'
    put:
      tags:
      - Alerts
      summary: Update Alert Policy by ID
      operationId: updateAlertPolicy
      parameters:
      - name: alertPolicyId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdatePolicyByIDModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertPolicyDTO'
      x-codegen-request-body-name: body
  /alerts/purgeInterval:
    get:
      tags:
      - Alerts
      summary: Get Purge Policy
      operationId: getPurgePolicy
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertPurgeIntervalDTO'
    put:
      tags:
      - Alerts
      summary: Update Purge Policy
      operationId: updatePurgePolicy
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ERAAlertPurgeIntervalDTO'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAAlertPurgeIntervalDTO'
      x-codegen-request-body-name: body
  /clones:
    get:
      tags:
      - Clones
      summary: Get list of all Clones
      description: |+
        Get all the clones, optionally created from a particular time machine.

      operationId: getAllClones
      parameters:
      - name: value-type
        in: query
        description: "\"id\", \"name\", \"database-name\""
        schema:
          type: string
      - name: value
        in: query
        description: It holds corresponding value for value type
        schema:
          type: string
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: any-status
        in: query
        description: Get entity(s) if it satisfies query criteria irrespective of
          status (retrieve even deleted)
        schema:
          type: boolean
          default: false
      - name: load-dbserver-cluster
        in: query
        description: Load cluster info
        schema:
          type: boolean
          default: false
      - name: order-by-dbserver-cluster
        in: query
        schema:
          type: boolean
          default: false
      - name: order-by-dbserver-logical-cluster
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERACloneNewDTO'
  /clones/{clone_id}:
    get:
      tags:
      - Clones
      summary: Get Clone by value-type
      operationId: getClone
      parameters:
      - name: clone_id
        in: path
        description: It holds corresponding value for value type
        required: true
        schema:
          type: string
      - name: value-type
        in: query
        schema:
          type: string
          default: id
          enum:
          - id
          - name
          - database-name
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: any-status
        in: query
        description: Get entity(s) if it satisfies query criteria irrespective of
          status (retrieve even deleted)
        schema:
          type: boolean
          default: false
      - name: load-dbserver-cluster
        in: query
        description: Load cluster info
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERACloneNewDTO'
    delete:
      tags:
      - Clones
      summary: Deregister given Clone
      operationId: deregisterClone
      parameters:
      - name: clone_id
        in: path
        required: true
        schema:
          type: string
      - name: delete-tm
        in: query
        schema:
          type: string
          default: "true"
      requestBody:
        description: Optional input for deleting clone
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DeleteCloneModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Clones
      summary: Update given Clone
      description: |+
        Update a clone's name, description or tags

      operationId: updateClone
      parameters:
      - name: clone_id
        in: path
        required: true
        schema:
          type: string
      - name: set-lcm-config
        in: query
        schema:
          type: boolean
          default: false
      - name: unset-lcm-config
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCloneModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERACloneNewDTO'
      x-codegen-request-body-name: body
  /clones/{clone_id}/refresh:
    post:
      tags:
      - Clones
      summary: Start Refresh Operation for given Clone
      description: |
        Refresh a clone created using NDB.
        Before calling this API, make sure to gather necessary information by doing the below mentioned things:
        ```
        1. Get the clone ID by calling '/clones'.
        2. Get the snapshot ID or valid PITR timestamp by calling '/tms/{tm-id}/capability'.
        3. [Optional] Get the input property list by calling '/clones/refresh/{database_engine}/input-file'.
        ```
      operationId: pushRefreshCloneWork
      parameters:
      - name: clone_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RefreshCloneModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /clones/refresh/{database_engine}/input-file:
    get:
      tags:
      - Clones
      summary: Get Input file for Clone Refresh Operation
      description: |
        Get the list of inputs required to refresh a clone of given type.
        This will return the complete metadata for each input property such as display name, description, etc.
        Only the 'name' and 'value' should be given to the 'actionArguments' part of the input JSON for registering a database. Example:
        ```
        {
          ...
          ...
          'actionArguments': [
            {
              'name': 'db_prop_1',
              'value': 'val1'
            },
            {
              'name': 'db_prop_2',
              'value': 'val2'
            },
            ...
            ...
          ]
        }
        ```
      operationId: getInputFileForCloneRefreshOperation
      parameters:
      - name: database_engine
        in: path
        required: true
        schema:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverPropertiesDTO'
  /clusters:
    get:
      tags:
      - Clusters
      summary: Get list of all Clusters
      operationId: getAllClusters
      parameters:
      - name: include-management-server-info
        in: query
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERACloudDTO'
  /clusters/{cluster_id}:
    get:
      tags:
      - Clusters
      summary: Get cluster by ID
      operationId: getCluster
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERACloud'
    put:
      tags:
      - Clusters
      summary: Update given Cluster
      operationId: updateCluster
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ERACloudDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Clusters
      summary: Delete given Cluster
      operationId: deleteCluster
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /clusters/name/{cluster_name}:
    get:
      tags:
      - Clusters
      summary: Get Cluster by its name
      operationId: getClusterByName
      parameters:
      - name: cluster_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERACloud'
  /clusters/supported-clouds:
    get:
      tags:
      - Clusters
      summary: Get all supported Cloud Types
      operationId: getAllSupportedCloudTypes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERACloudTypeDTO'
  /databases:
    get:
      tags:
      - Databases
      summary: Get all Databases
      description: |+
        Get all registered and provisioned databases.

      operationId: getAllDatabases
      parameters:
      - name: value-type
        in: query
        description: "\"id\", \"name\", \"database-name\""
        schema:
          type: string
      - name: value
        in: query
        description: It holds corresponding value for value type
        schema:
          type: string
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: load-dbserver-cluster
        in: query
        description: Load cluster info
        schema:
          type: boolean
          default: false
      - name: order-by-dbserver-cluster
        in: query
        schema:
          type: boolean
          default: false
      - name: order-by-dbserver-logical-cluster
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERADatabaseDTO'
  /databases/provision:
    post:
      tags:
      - Databases
      summary: Provision a database
      description: |+
        Provision a database using NDB and create a Time Machine for it.
        Before calling this API, make sure to gather necessary information by doing the below mentioned things:
        ```
        1. Get the required input property list by calling '/app_types/{database_engine}/provision/input-file'.
        2. Get the cluster ID by calling '/clusters'.
        3. Get the profile IDs by calling '/profiles'.
        4. [Optional] Get the SLA ID by calling '/slas'.
        ```

      operationId: pushProvisionWork
      requestBody:
        description: Input required to provision a database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionDatabaseModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DbProvisionTaskInfoDTO'
      x-codegen-request-body-name: body
  /databases/register:
    post:
      tags:
      - Databases
      summary: Register an existing Database
      description: |
        Register a source database with NDB and create a Time Machine for it.
        Before calling this API, make sure to gather necessary information by doing the below mentioned things:
        ```
        1. Get the required input property list by calling '/app_types/{database_engine}/register/input-file'.
        2. Get the cluster name/ID by calling '/clusters'.
        3. [Optional] Get the SLA name/ID by calling '/slas'.
        ```
      operationId: pushRegisterDatabase
      requestBody:
        description: Input for registering database
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RegisterDatabaseModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /databases/{id}:
    get:
      tags:
      - Databases
      summary: Get Database by value type
      description: |+
        Returns the database details for the given value corresponding to valueType

      operationId: getDatabase
      parameters:
      - name: id
        in: path
        description: It holds corresponding value for value type
        required: true
        schema:
          type: string
      - name: value-type
        in: query
        schema:
          type: string
          default: id
          enum:
          - id
          - name
          - database-name
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: load-dbserver-cluster
        in: query
        description: Load cluster info
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERADatabaseDTO'
    delete:
      tags:
      - Databases
      summary: Deregister a database by ID
      operationId: deregisterDatabase
      parameters:
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DatabaseDeregisterInfo'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Databases
      summary: Update a database
      description: |+
        Update a database's name, description or tags

      operationId: updateDatabase
      parameters:
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      - name: set-lcm-config
        in: query
        schema:
          type: boolean
          default: false
      - name: unset-lcm-config
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Input required to update a database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERADatabaseDTO'
      x-codegen-request-body-name: body
  /databases/{database_id}/restore:
    post:
      tags:
      - Databases
      summary: Restore Database
      operationId: pushRestoreDatabase
      parameters:
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RestoreDatabaseModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /app_types/{database_engine}/provision/input-file:
    get:
      tags:
      - Databases
      summary: Get Input File for Provisioning Application
      description: |
        Get the list of inputs required to provision a database of given type.
        This will return the complete metadata for each input property such as display name, description, etc.
        Only the 'name' and 'value' should be given to the 'provisionInfo' part of the input JSON for provisioning a database. Example:
        ```
        {
          ...
          ...
          'provisionInfo': [
            {
              'name': 'db_prop_1',
              'value': 'val1'
            },
            {
              'name': 'db_prop_2',
              'value': 'val2'
            },
            ...
            ...
          ]
        }
        ```
      operationId: getInputFileForProvisionApplication
      parameters:
      - name: database_engine
        in: path
        required: true
        schema:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
      - name: category
        in: query
        required: true
        schema:
          type: string
          enum:
          - db_server;database
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverPropertiesDTO'
  /app_types/{database_engine}/register/input-file:
    get:
      tags:
      - Databases
      summary: Get Input File for Registering/Adding Application
      description: |
        Get the list of inputs required to register a database of given type.
        This will return the complete metadata for each input property such as display name, description, etc.
        Only the 'name' and 'value' should be given to the 'applicationInfo' part of the input JSON for registering a database. Example:
        ```
        {
          ...
          ...
          'applicationInfo': [
            {
              'name': 'vm_ip',
              'value': '10.10.10.10'
            },
            {
              'name': 'db_prop_1',
              'value': 'val1'
            },
            ...
            ...
          ]
        }
        ```
      operationId: getInputFileForAddApplication
      parameters:
      - name: database_engine
        in: path
        required: true
        schema:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
      - name: category
        in: query
        required: true
        schema:
          type: string
          enum:
          - db_server;database
      - name: entity-type
        in: query
        schema:
          type: string
          default: databases
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverPropertiesDTO'
  /dbservers:
    get:
      tags:
      - Database Servers
      summary: Get list of all Database Servers
      operationId: getAllDBServers
      parameters:
      - name: value-type
        in: query
        description: "ip, name, vm-cluster-name, vm-cluster-uuid, dbserver-cluster-id,\
          \ nx-cluster-id, fqdn"
        schema:
          type: string
      - name: value
        in: query
        description: It holds corresponding value for value type
        schema:
          type: string
      - name: load-dbserver-cluster
        in: query
        schema:
          type: boolean
          default: false
      - name: load-databases
        in: query
        schema:
          type: boolean
          default: false
      - name: load-clones
        in: query
        schema:
          type: boolean
          default: false
      - name: detailed
        in: query
        schema:
          type: boolean
          default: false
      - name: load-metrics
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERADBServerDTO'
  /dbservers/provision:
    post:
      tags:
      - Database Servers
      summary: Provision Database Server
      description: |
        Register a database server with NDB
      operationId: provisionDBServer
      requestBody:
        description: Input required to Create a DBServer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDBServerModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dbservers/register:
    post:
      tags:
      - Database Servers
      summary: Register an existing Database Server
      description: |
        Register a database server with NDB
      operationId: registerDBServer
      requestBody:
        description: Input required to Create a DBServer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDBServerModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dbservers/{dbserver_id}:
    get:
      tags:
      - Database Servers
      summary: Get Database Server by value-type
      operationId: getDBServer
      parameters:
      - name: dbserver_id
        in: path
        description: It holds corresponding value for value type
        required: true
        schema:
          type: string
      - name: value-type
        in: query
        schema:
          type: string
          default: id
          enum:
          - id
          - ip
          - name
          - vm-cluster-name
          - vm-cluster-uuid
          - dbserver-cluster-id
          - nx-cluster-id
          - fqdn
      - name: load-dbserver-cluster
        in: query
        schema:
          type: boolean
          default: false
      - name: load-databases
        in: query
        schema:
          type: boolean
          default: false
      - name: load-clones
        in: query
        schema:
          type: boolean
          default: false
      - name: load-metrics
        in: query
        schema:
          type: boolean
          default: false
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: curator
        in: query
        description: Get entity(s) if it satisfies query criteria irrespective of
          status (retrieve even deleted)
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERADBServerDTO'
    put:
      tags:
      - Database Servers
      summary: Update given Database Server
      description: |
        Update a database server's description and/or tags
      operationId: updateDatabaseServer
      parameters:
      - name: dbserver_id
        in: path
        required: true
        schema:
          type: string
      - name: set-lcm-config
        in: query
        schema:
          type: boolean
          default: false
      - name: unset-lcm-config
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Input to update DBServer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDBServerModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERADBServerDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Database Servers
      summary: Deregister Host
      operationId: deregisterHost
      parameters:
      - name: dbserver_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to deregister dbserver
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DeRegisterDBServerModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dbservers/{dbserver_id}/patch:
    post:
      tags:
      - Database Servers
      summary: Patch given Database server
      operationId: patchDbServer
      parameters:
      - name: dbserver_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to patch DB Server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDBServerModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dpcs:
    get:
      tags:
      - Database Server Physical Clusters
      summary: Get list of all DB server clusters
      operationId: getAllDBServerClusters
      parameters:
      - name: value-type
        in: query
        schema:
          type: string
          enum:
          - id
      - name: value
        in: query
        description: id
        schema:
          type: string
      - name: load-databases
        in: query
        schema:
          type: boolean
          default: false
      - name: load-clones
        in: query
        schema:
          type: boolean
          default: false
      - name: load-metrics
        in: query
        schema:
          type: boolean
          default: false
      - name: detailed
        in: query
        schema:
          type: boolean
          default: false
      - name: any-status
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERADBServerClusterDTO'
  /dpcs/provision:
    post:
      tags:
      - Database Server Physical Clusters
      summary: Provision DB Server Cluster
      operationId: provisionDBServerCluster
      requestBody:
        description: Input required to provision a DBServerCluster
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionDBServerPhysicalClusterModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dpcs/register:
    post:
      tags:
      - Database Server Physical Clusters
      summary: Register DB Server Cluster
      operationId: registerDBServerCluster
      requestBody:
        description: Input required to register DB Server Physical Cluster
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDBServerPhysicalClusterModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dpcs/{dbserver-cluster-id}:
    get:
      tags:
      - Database Server Physical Clusters
      summary: Get DB server cluster by ID
      operationId: getDBServerCluster
      parameters:
      - name: dbserver-cluster-id
        in: path
        description: id
        required: true
        schema:
          type: string
      - name: value-type
        in: query
        schema:
          type: string
          default: id
          enum:
          - id
      - name: load-databases
        in: query
        schema:
          type: boolean
          default: false
      - name: load-clones
        in: query
        schema:
          type: boolean
          default: false
      - name: load-metrics
        in: query
        schema:
          type: boolean
          default: false
      - name: detailed
        in: query
        schema:
          type: boolean
          default: false
      - name: any-status
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERADBServerClusterDTO'
    put:
      tags:
      - Database Server Physical Clusters
      summary: Update DB Server Cluster Partially
      operationId: updateDBServerClusterPartially
      parameters:
      - name: dbserver-cluster-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to update DB Server Cluster
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDBServerClusterModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERADBServerClusterDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Database Server Physical Clusters
      summary: Deregister given DB Server Cluster by ID
      operationId: deregisterDBServerCluster
      parameters:
      - name: dbserver-cluster-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DeregisterDBServerClusterModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /dpcs/{dbserver-cluster-id}/patch:
    post:
      tags:
      - Database Server Physical Clusters
      summary: Patch given DB Server Cluster
      operationId: patchDbServerCluster
      parameters:
      - name: dbserver-cluster-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to patch DB Server Cluster
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDBServerClusterModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /operations:
    get:
      tags:
      - Operations
      summary: Get list of all Operations
      operationId: getAllOperations
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: days
        in: query
        schema:
          type: string
      - name: sysOps
        in: query
        schema:
          type: string
          default: "false"
      - name: scheduledOps
        in: query
        schema:
          type: string
          default: "false"
      - name: internalOps
        in: query
        schema:
          type: string
          default: "false"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperationDefinition'
  /operations/short-info:
    get:
      tags:
      - Operations
      summary: Get NDB Operations short information
      operationId: getEraOperationsShortInfo
      parameters:
      - name: dbserver-id
        in: query
        schema:
          type: string
      - name: era-server
        in: query
        schema:
          type: boolean
          default: false
      - name: ip
        in: query
        schema:
          type: string
      - name: client-id
        in: query
        schema:
          type: string
      - name: status
        in: query
        schema:
          type: string
      - name: type
        in: query
        schema:
          type: string
      - name: hide-subops
        in: query
        schema:
          type: boolean
          default: false
      - name: system-triggered
        in: query
        schema:
          type: boolean
          default: false
      - name: user-triggered
        in: query
        schema:
          type: boolean
          default: true
      - name: scheduled
        in: query
        schema:
          type: boolean
          default: false
      - name: date-submitted
        in: query
        schema:
          type: string
      - name: from-time
        in: query
        schema:
          type: string
      - name: to-time
        in: query
        schema:
          type: string
      - name: days
        in: query
        schema:
          type: string
          default: "0"
      - name: entity-id
        in: query
        schema:
          type: string
      - name: entity-name
        in: query
        schema:
          type: string
      - name: entity-type
        in: query
        schema:
          type: string
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      - name: descending
        in: query
        schema:
          type: boolean
          default: true
      - name: operation-id
        in: query
        schema:
          type: string
      - name: timestamp
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraOperationsSummaryInfoDTO'
  /operations/{operation_id}:
    get:
      tags:
      - Operations
      summary: Get Operation Definition by ID
      operationId: getOperationDefinition
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      - name: display
        in: query
        schema:
          type: string
          default: "false"
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationDefinition'
  /profiles:
    get:
      tags:
      - Profiles
      summary: Get all Profiles
      description: This API will list profiles
      operationId: getAllProfiles
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: engine
        in: query
        description: Filter profiles by database engine.
        schema:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
      - name: type
        in: query
        description: Filter profiles by type.
        schema:
          type: string
          enum:
          - Software
          - Compute
          - Network
          - Database_Parameter
      - name: id
        in: query
        description: Filter profiles by id
        schema:
          type: string
      - name: name
        in: query
        description: "Filter profile by name, this should be always used along with\
          \ profile type"
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERAProfileDTO'
    post:
      tags:
      - Profiles
      summary: Create a Profile
      description: This API will create a profile
      operationId: createProfile
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /profiles/{profile_id}:
    put:
      tags:
      - Profiles
      summary: Update Profile
      description: This API will edit a profile
      operationId: updateProfile
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAProfileDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Profiles
      summary: Delete given Profile
      description: This API will delete a profile
      operationId: deleteProfile
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /profiles/{profile_id}/versions:
    post:
      tags:
      - Profiles
      summary: Create Profile Version
      operationId: createProfileVersion
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: authorization
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /profiles/{profile_id}/versions/{version-id}:
    get:
      tags:
      - Profiles
      summary: Get Profile Version
      description: This API will get a profile version
      operationId: getProfileVersion
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        description: ID of the profile that you want to operate on. It can be obtained
          from the /profiles API
        required: true
        schema:
          type: string
      - name: version-id
        in: path
        description: ID of the profile version that you want to operate on. It can
          be obtained from the /profiles?id=<profile-id> API
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraProfileVersionDTO'
    put:
      tags:
      - Profiles
      summary: Update Profile Version
      operationId: updateProfileVersion
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      - name: version-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileVersionModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraProfileVersionDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Profiles
      summary: Delete Profile Version
      operationId: deleteProfileVersion
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      - name: version-id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /profiles/{profile_id}/versions/latest:
    get:
      tags:
      - Profiles
      summary: Get Latest Profile Version
      operationId: getLatestProfileVersion
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: authorization
        in: header
        schema:
          type: string
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraProfileVersionDTO'
  /profiles/input-file:
    get:
      tags:
      - Profiles
      summary: Get inputs for creating a profile
      description: |
        This API will provide input json
      operationId: getInputFile
      parameters:
      - name: type
        in: query
        schema:
          type: string
          enum:
          - Software
          - Compute
          - Network
          - Database_Parameter
      - name: engine
        in: query
        description: "oracle_database, postgres_database, sqlserver_database, mariadb_database,\
          \ mysql_database, saphana_database, mongodb_database"
        schema:
          type: string
      - name: topology
        in: query
        description: "single, cluster"
        schema:
          type: string
          default: ALL
      - name: db-version
        in: query
        schema:
          type: string
          default: ALL
      - name: id
        in: query
        schema:
          type: string
      - name: name
        in: query
        description: "Profile Name, this should be always used along with profile\
          \ type"
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraProfileVersionDTO'
  /resources/networks:
    get:
      tags:
      - NDB Resources
      summary: Get Vlans
      operationId: getVlans
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: detailed
        in: query
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraVlanDTO'
    post:
      tags:
      - NDB Resources
      summary: Add a vLAN to NDB
      description: |
        Add a vLAN to NDB.
        A vLAN can either be specified as a DHCP or a Static vLAN.
        If DHCP is provided then it doesn't need any properties or IP address pools.
        if Static is provided then provide at least one IP address pool and the following properties:
        1. VLAN_GATEWAY
        2. VLAN_SUBNET_MASK
        3. VLAN_PRIMARY_DNS
        4. VLAN_SECONDARY_DNS [optional]
        5. VLAN_DNS_DOMAIN [optional]
      operationId: addVlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddVlanModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraVlanDTO'
      x-codegen-request-body-name: body
  /resources/networks/validate-gateway:
    get:
      tags:
      - NDB Resources
      summary: Validate gateway IP
      operationId: validateGatewayIP
      parameters:
      - name: gateway-ip
        in: query
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /resources/networks/{vlan_id}:
    put:
      tags:
      - NDB Resources
      summary: Update a vLAN used by NDB
      description: |
        Update a vLAN used by NDB.
        A vLAN can either be specified as a DHCP or a Static vLAN.
        If DHCP is provided then it doesn't need any properties or IP address pools.
        if Static is provided then provide at least one IP address pool and the following properties:
        1. VLAN_GATEWAY
        2. VLAN_SUBNET_MASK
        3. VLAN_PRIMARY_DNS
        4. VLAN_SECONDARY_DNS [optional]
        5. VLAN_DNS_DOMAIN [optional]
      operationId: updateVlan
      parameters:
      - name: vlan_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddVlanModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraVlanDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - NDB Resources
      summary: Delete a vLAN used by NDB
      operationId: deleteVlan
      parameters:
      - name: vlan_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /resources/networks/{vlan_id}/ip-pool:
    post:
      tags:
      - NDB Resources
      summary: Add IP address pools to a vLAN
      description: |
        Add IP address pools to a vLAN.
        This is applicable only to Static vLANs.
      operationId: addIPAddressPools
      parameters:
      - name: vlan_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddIPPoolModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraVlanDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - NDB Resources
      summary: Remove IP address pools from a vLAN
      description: |-
        Remove IP address pools from a vLAN.
        This is applicable only to Static vLANs.
      operationId: removeIPAddressPools
      parameters:
      - name: vlan_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveIPPoolModel'
        required: false
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /slas:
    get:
      tags:
      - SLAs
      summary: Get all SLAs
      operationId: getAllSLAs
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EraSlaDTO'
    post:
      tags:
      - SLAs
      summary: Create SLA from NDB Service
      operationId: createSLA
      requestBody:
        description: Input required to create a SLA
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EraSlaDTO'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraSlaDTO'
      x-codegen-request-body-name: body
  /slas/name/{sla_name}:
    get:
      tags:
      - SLAs
      summary: Get SLA by Name
      operationId: getSLAByName
      parameters:
      - name: sla_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraSlaDTO'
  /slas/{sla_id}:
    get:
      tags:
      - SLAs
      summary: Get SLA by ID
      operationId: getSLA
      parameters:
      - name: sla_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraSlaDTO'
    put:
      tags:
      - SLAs
      summary: Update given SLA
      operationId: updateSLA
      parameters:
      - name: sla_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to update given SLA
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EraSlaDTO'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraSlaDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - SLAs
      summary: Delete SLA Template
      operationId: deleteSLATemplate
      parameters:
      - name: sla_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /tags:
    get:
      tags:
      - Tags
      summary: Get list of all Tags
      operationId: getTags
      parameters:
      - name: client_tz
        in: header
        schema:
          type: string
      - name: entityType
        in: query
        schema:
          type: string
          enum:
          - DATABASE
          - TIME_MACHINE
          - CLONE
          - DATABASE_SERVER
      - name: id
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EraTagDTO'
    post:
      tags:
      - Tags
      summary: Create a tag
      operationId: createTag
      requestBody:
        description: Input required to create a tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraTagDTO'
      x-codegen-request-body-name: body
  /tags/{id}:
    put:
      tags:
      - Tags
      summary: Update a tag
      operationId: updateTag
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to update a tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraTagDTO'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Tags
      summary: Delete a tag
      operationId: deleteTag
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
  /tms:
    get:
      tags:
      - Time Machines
      summary: Get list of all Time Machines
      description: |+
        Returns the list of all time machines

      operationId: getAllTimeMachines
      parameters:
      - name: value-type
        in: query
        description: "\"id\", \"name\""
        schema:
          type: string
      - name: value
        in: query
        description: It holds corresponding value for value type
        schema:
          type: string
      - name: load-database
        in: query
        schema:
          type: boolean
          default: false
      - name: load-clones
        in: query
        schema:
          type: boolean
          default: false
      - name: clone-tms
        in: query
        schema:
          type: boolean
          default: false
      - name: database-tms
        in: query
        schema:
          type: boolean
          default: true
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERATimeMachineNewDTO'
  /tms/{timemachine_id}:
    get:
      tags:
      - Time Machines
      summary: Get Time Machine by value-type
      operationId: getTimeMachines
      parameters:
      - name: timemachine_id
        in: path
        description: It holds corresponding value for value type
        required: true
        schema:
          type: string
      - name: value-type
        in: query
        schema:
          type: string
          default: id
          enum:
          - id
          - name
      - name: detailed
        in: query
        description: Load entities with entire details
        schema:
          type: boolean
          default: false
      - name: load-database
        in: query
        schema:
          type: boolean
          default: false
      - name: load-clones
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERATimeMachineNewDTO'
    delete:
      tags:
      - Time Machines
      summary: Delete Time Machine by ID
      operationId: deleteTimeMachine
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERAStatusDTO'
    patch:
      tags:
      - Time Machines
      summary: Update given Time Machine
      description: "Update a time machine's name, description or tags"
      operationId: updateTimeMachine
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to update a time machine
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTimeMachineModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERATimeMachineNewDTO'
      x-codegen-request-body-name: body
  /tms/{timemachine_id}/snapshots:
    post:
      tags:
      - Time Machines
      summary: Take Snapshot
      description: Take a snapshot of the source database
      operationId: pushSnapshotWork
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to take snapshot
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TakeSnapshotModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /snapshots:
    get:
      tags:
      - Snapshots
      summary: Get list of all Snapshots
      description: |+
        Returns the list of all snapshots

      operationId: getAllSnapshots
      parameters:
      - name: value-type
        in: query
        description: "\"type\", \"status\", \"protection-domain-id\", \"database-node\"\
          , \"snapshot-id\", \"time-machine\", \"latest\""
        schema:
          type: string
      - name: value
        in: query
        description: It holds corresponding value for value type
        schema:
          type: string
      - name: database-ids
        in: query
        description: Comma separated list of database-ids for which snapshots are
          to be fetched
        schema:
          type: string
      - name: all
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERASnapshotDTO'
  /snapshots/{snapshot_id}:
    get:
      tags:
      - Snapshots
      summary: Get Snapshot by value-type
      operationId: getSnapshot
      parameters:
      - name: snapshot_id
        in: path
        description: It holds corresponding value for value type
        required: true
        schema:
          type: string
      - name: load-replicated-child-snapshots
        in: query
        schema:
          type: boolean
          default: false
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERASnapshotDTO'
    delete:
      tags:
      - Time Machines
      summary: Delete Snapshot
      operationId: deleteSnapshot
      parameters:
      - name: snapshot-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
  /snapshots/{snapshot_id}/files:
    get:
      tags:
      - Snapshots
      summary: Get Files protected in Snapshot
      description: |+
        Returns the list of all data files protected in a given Snapshot

      operationId: getSnapshotFiles
      parameters:
      - name: snapshot_id
        in: path
        description: It holds corresponding value for value type
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERASnapshotFilesInfo'
  /tms/{timemachine_id}/log-catchups:
    post:
      tags:
      - Time Machines
      summary: Start Log Catchup for given time machine
      description: |
        Perform log catchup of the source database.
        Use the below JSON:
        ```
        {
          'actionHeader': [
            {
              'name': 'switch_log',
              'value': 'true'
            }
          ]
        }
        ```
      operationId: pushLogCatchupWork
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to perform log catchup
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PerformLogCatchupModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /tms/{timemachine_id}/capability:
    get:
      tags:
      - Time Machines
      summary: Get capability of given Time Machine
      operationId: getTimeMachineCapability
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      - name: time-zone
        in: query
        schema:
          type: string
          default: UTC
      - name: type
        in: query
        schema:
          type: string
          default: detailed
      - name: load-db-logs
        in: query
        schema:
          type: string
          default: "true"
      - name: load-snapshots
        in: query
        schema:
          type: string
          default: "true"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EraTimeMachineCapability'
  /tms/{timemachine_id}/pause:
    patch:
      tags:
      - Time Machines
      summary: Pause the given Time Machine
      description: |+
        Pause a time machine. When a time machine is paused, the SLA snapshots will not be captured.

      operationId: pauseTimeMachine
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Optional Arguments
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TimeMachinePauseModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /tms/{timemachine_id}/resume:
    patch:
      tags:
      - Time Machines
      summary: Resume given Time Machine
      operationId: resumeTimeMachine
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Optional Arguments
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TimeMachineResumeModel'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /tms/{timemachine_id}/clones:
    get:
      tags:
      - Time Machines
      summary: Get Clones for given Time Machine
      operationId: getClonesForTimeMachine
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERACloneDTO'
    post:
      tags:
      - Time Machines
      summary: Create Clone using given Time Machine
      description: |
        Create a clone from a time machine using NDB.
        Before calling this API, make sure to gather necessary information by doing the below mentioned things:
        ```
        1. Get the time machine ID by calling '/tms'.
        2. Get the required input property list by calling '/tms/{tm_id}/clones/input-file'.
        3. Get the snapshot ID or valid PITR timestamp by calling '/tms/{tm_id}/capability'.
        ```
      operationId: pushCloneWork
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Input required to create clone using time machine
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateCloneUsingTimeMachineModel'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoSummary'
      x-codegen-request-body-name: body
  /tms/{timemachine_id}/clones/input-file:
    get:
      tags:
      - Time Machines
      summary: Get Input File for Clone Operation
      description: |
        Get the list of inputs required to clone a database from a time machine.
        This will return the complete metadata for each input property such as display name, description, etc.
        Only the 'name' and 'value' should be given to the 'actionArguments' part of the input JSON for cloning a database. Example:
        ```
        {
          ...
          ...
          'actionArguments': [
            {
              'name': 'db_prop_1',
              'value': 'val1'
            },
            {
              'name': 'db_prop_2',
              'value': 'val2'
            },
            ...
            ...
          ]
        }
        ```
      operationId: getInputFileForCloneOperation
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      - name: category
        in: query
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverPropertiesDTO'
  /tms/name/{timemachine_name}/clones/input-file:
    get:
      tags:
      - Time Machines
      summary: Get Input File for Clone Operation By Time Machine Name
      description: |
        Get the list of inputs required to clone a database from a time machine.
        This will return the complete metadata for each input property such as display name, description, etc.
        Only the 'name' and 'value' should be given to the 'actionArguments' part of the input JSON for cloning a database. Example:
        ```
        {
          ...
          ...
          'actionArguments': [
            {
              'name': 'db_prop_1',
              'value': 'val1'
            },
            {
              'name': 'db_prop_2',
              'value': 'val2'
            },
            ...
            ...
          ]
        }
        ```
      operationId: getInputFileForCloneOperationByTmName
      parameters:
      - name: timemachine_name
        in: path
        required: true
        schema:
          type: string
      - name: category
        in: query
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverPropertiesDTO'
  /tms/{timemachine_id}/candidate-dbservers:
    get:
      tags:
      - Time Machines
      summary: Get list of Candidate Hosts/DBServers for given Time Machine
      description: |+
        Get the list of database servers into which clones from the given time machine can be created.

      operationId: getCandidateDbserversForTimeMachine
      parameters:
      - name: timemachine_id
        in: path
        required: true
        schema:
          type: string
      - name: usable
        in: query
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ERADBServerDTO'
components:
  schemas:
    ActionArguments:
      type: object
      properties:
        name:
          type: string
        value:
          type: object
      description: Action Arguments
    AddIPPoolModel:
      type: object
      properties:
        ipPools:
          type: array
          items:
            $ref: '#/components/schemas/IpPools'
    AddVlanModel:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
        ipPools:
          type: array
          items:
            $ref: '#/components/schemas/IpPools'
    CloudInfo:
      type: object
      properties:
        clusterIp:
          type: string
        nameServers:
          type: array
          items:
            type: string
        ntpServers:
          type: array
          items:
            type: string
        timezone:
          type: string
        timezoneConfigFile:
          type: string
    ClusterProperties:
      type: object
      properties:
        refId:
          type: string
        name:
          type: string
        value:
          type: string
        secure:
          type: boolean
          default: false
        description:
          type: string
    Connection:
      type: object
      properties:
        readOnly:
          type: boolean
          default: false
        autoCommit:
          type: boolean
          default: false
        metaData:
          $ref: '#/components/schemas/DatabaseMetaData'
        catalog:
          type: string
        transactionIsolation:
          type: integer
          format: int32
        warnings:
          $ref: '#/components/schemas/SQLWarning'
        typeMap:
          type: object
          properties: {}
        holdability:
          type: integer
          format: int32
        clientInfo:
          type: object
          additionalProperties:
            type: object
            properties: {}
        networkTimeout:
          type: integer
          format: int32
        closed:
          type: boolean
          default: false
        schema:
          type: string
    CreateCloneUsingTimeMachineModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        createDbserver:
          type: boolean
          default: false
        clustered:
          type: boolean
          default: false
        nxClusterId:
          type: string
        sshPublicKey:
          type: object
          properties: {}
        dbserverId:
          type: string
        dbserverClusterId:
          type: object
          properties: {}
        dbserverLogicalClusterId:
          type: string
        timeMachineId:
          type: string
        snapshotId:
          type: string
        userPitrTimestamp:
          type: string
        newDbServerTimeZone:
          type: string
        timeZone:
          type: string
        latestSnapshot:
          type: boolean
          default: false
        nodeCount:
          type: integer
          format: int32
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        lcmConfig:
          $ref: '#/components/schemas/LcmConfigForClone'
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        computeProfileId:
          type: string
        networkProfileId:
          type: string
        databaseParameterProfileId:
          type: string
      description: Create  Clone Using Time Machine Model
      example:
        name: CDM-Demo_DB_2020_Apr_17_15_40_56
        description: ""
        createDbserver: true
        clustered: false
        nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        timeMachineId: 5d92be3a-1238-4ac0-9dc7-96e89e48edc4
        snapshotId: 9d42109c-d149-417d-82cf-54cb2327fe32
        newDbServerTimeZone: India Standard Time
        timeZone: Asia/Calcutta
        latestSnapshot: false
        nodeCount: 1
        nodes:
        - vmName: DBServerName
          computeProfileId: c1560710-ebae-4351-94e1-020209770487
          networkProfileId: bf4c95b5-c4d3-4383-b4c7-8a2feaaf3d6b
          nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
          properties: []
        tags: []
        lcmConfig:
          databaseLCMConfig:
            expiryDetails:
              expireInDays: 30
              expiryDateTimezone: Asia/Calcutta
            refreshDetails:
              refreshInDays: 10
              refreshTime: 00:00:00
              refreshDateTimezone: Asia/Calcutta
        actionArguments:
        - name: vm_name
          value: DBServerName
        - name: guest_os
          value: windows7_64Guest
        - name: sql_user_name
          value: sa
        - name: vm_win_lang_settings
          value: en-US
        - name: authentication_mode
          value: windows
        - name: drives_to_mountpoints
          value: "true"
        - name: instance_name
          value: MSSQLSERVER
        - name: database_name
          value: CDM-Demo DB
        - name: cluster_db
          value: "false"
        - name: vm_dbserver_admin_password
          value: Password@1
        - name: windows_domain_profile_id
          value: a9ab1391-5ad1-4b9f-85cd-0ca3f07dc164
        - name: target_mountpoints_location
          value: /mount/point/path
        computeProfileId: c1560710-ebae-4351-94e1-020209770487
        networkProfileId: bf4c95b5-c4d3-4383-b4c7-8a2feaaf3d6b
    CreateDBServerModel:
      type: object
      properties:
        newDbServerTimeZone:
          type: string
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        nxClusterId:
          type: string
        softwareProfileId:
          type: string
        latestSnapshot:
          type: boolean
          default: false
        databaseType:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
        computeProfileId:
          type: string
        networkProfileId:
          type: string
        timeMachineId:
          type: string
        timeZone:
          type: string
      description: Create DBServer Model
      example:
        newDbServerTimeZone: Asia/Calcutta
        actionArguments:
        - name: vm_name
          value: POSTGRES_10.4_OOB_2020_Apr_17_11_22_32
        - name: client_public_key
          value: SSHPublicKeyForNodeAccess
        nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        softwareProfileId: 7f4ca84a-d2a5-4881-871b-6c19ea6bc207
        latestSnapshot: true
        databaseType: postgres_database
        computeProfileId: c1560710-ebae-4351-94e1-020209770487
        networkProfileId: e6873237-1b7f-451f-a0a7-5d8fdaacb72e
        description: Description
        softwareProfileVersionId: 54833809-823e-4be9-a475-34cb01da9412
    CreateProfileModel:
      type: object
      properties:
        engineType:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
        type:
          type: string
        dbVersion:
          type: string
        systemProfile:
          type: boolean
          default: false
        published:
          type: boolean
          default: false
        deprecated:
          type: boolean
          default: false
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
        name:
          type: string
        description:
          type: string
      example:
        engineType: postgres_database
        type: Software
        dbVersion: ALL
        systemProfile: false
        properties:
        - name: SOURCE_DBSERVER_ID
          value: ""
          secure: false
          description: ID of the database server that should be used as a reference
            to create the software profile
        name: ProfileName
        description: Description
    DatabaseDeregisterInfo:
      type: object
      properties:
        softRemove:
          type: boolean
          description: no cleanup/deletion operation should be submitted
          default: false
        remove:
          type: boolean
          description: This field is used to specify that the database should be cleaned
            up
          default: false
        delete:
          type: boolean
          description: the database has to be deleted from the dbserver
          default: false
        deleteTimeMachine:
          type: boolean
          default: false
      example:
        delete: true
        remove: false
        softRemove: false
        forced: false
        deleteTimeMachine: true
        deleteLogicalCluster: true
    DatabaseLCMConfig:
      type: object
      properties:
        expiryDetails:
          $ref: '#/components/schemas/ExpiryDetails'
        refreshDetails:
          $ref: '#/components/schemas/RefreshDetails'
    DatabaseMetaData:
      type: object
      properties:
        readOnly:
          type: boolean
          default: false
        url:
          type: string
        userName:
          type: string
        resultSetHoldability:
          type: integer
          format: int32
        databaseProductName:
          type: string
        databaseProductVersion:
          type: string
        driverName:
          type: string
        driverVersion:
          type: string
        driverMajorVersion:
          type: integer
          format: int32
        driverMinorVersion:
          type: integer
          format: int32
        identifierQuoteString:
          type: string
        sqlkeywords:
          type: string
        numericFunctions:
          type: string
        stringFunctions:
          type: string
        systemFunctions:
          type: string
        timeDateFunctions:
          type: string
        searchStringEscape:
          type: string
        extraNameCharacters:
          type: string
        schemaTerm:
          type: string
        procedureTerm:
          type: string
        catalogTerm:
          type: string
        catalogAtStart:
          type: boolean
          default: false
        catalogSeparator:
          type: string
        maxBinaryLiteralLength:
          type: integer
          format: int32
        maxCharLiteralLength:
          type: integer
          format: int32
        maxColumnNameLength:
          type: integer
          format: int32
        maxColumnsInGroupBy:
          type: integer
          format: int32
        maxColumnsInIndex:
          type: integer
          format: int32
        maxColumnsInOrderBy:
          type: integer
          format: int32
        maxColumnsInSelect:
          type: integer
          format: int32
        maxColumnsInTable:
          type: integer
          format: int32
        maxConnections:
          type: integer
          format: int32
        maxCursorNameLength:
          type: integer
          format: int32
        maxIndexLength:
          type: integer
          format: int32
        maxSchemaNameLength:
          type: integer
          format: int32
        maxProcedureNameLength:
          type: integer
          format: int32
        maxCatalogNameLength:
          type: integer
          format: int32
        maxRowSize:
          type: integer
          format: int32
        maxStatementLength:
          type: integer
          format: int32
        maxStatements:
          type: integer
          format: int32
        maxTableNameLength:
          type: integer
          format: int32
        maxTablesInSelect:
          type: integer
          format: int32
        maxUserNameLength:
          type: integer
          format: int32
        defaultTransactionIsolation:
          type: integer
          format: int32
        schemas:
          $ref: '#/components/schemas/ResultSet'
        catalogs:
          $ref: '#/components/schemas/ResultSet'
        tableTypes:
          $ref: '#/components/schemas/ResultSet'
        typeInfo:
          $ref: '#/components/schemas/ResultSet'
        databaseMajorVersion:
          type: integer
          format: int32
        databaseMinorVersion:
          type: integer
          format: int32
        jdbcmajorVersion:
          type: integer
          format: int32
        jdbcminorVersion:
          type: integer
          format: int32
        sqlstateType:
          type: integer
          format: int32
        rowIdLifetime:
          type: string
          enum:
          - ROWID_UNSUPPORTED
          - ROWID_VALID_OTHER
          - ROWID_VALID_SESSION
          - ROWID_VALID_TRANSACTION
          - ROWID_VALID_FOREVER
        clientInfoProperties:
          $ref: '#/components/schemas/ResultSet'
        maxLogicalLobSize:
          type: integer
          format: int64
    DbProvisionTaskInfoDTO:
      type: object
      properties:
        ownerId:
          type: string
        userDTO:
          $ref: '#/components/schemas/ERAUser'
        connection:
          $ref: '#/components/schemas/Connection'
        timeZone:
          type: string
        actionHeader:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        payload:
          type: object
          properties: {}
        parentOperation:
          $ref: '#/components/schemas/EraParentOperationDTO'
        parentWorkId:
          type: string
        parentStepIndex:
          type: integer
          format: int32
        id:
          type: string
        name:
          type: string
        type:
          type: string
        applicationType:
          type: string
        hostId:
          type: string
        clientId:
          type: string
        applicationId:
          type: string
        systemCreated:
          type: boolean
          default: false
        entityId:
          type: string
        entityName:
          type: string
        entityType:
          type: string
        submissionDate:
          type: string
        expiryDate:
          type: string
        status:
          type: string
        operationId:
          type: string
        parentId:
          type: string
        parentOpStep:
          type: integer
          format: int32
        submittedForOwnerId:
          type: string
        priority:
          type: integer
          format: int32
        message:
          type: string
        statusName:
          type: string
        verboseLevel:
          type: integer
          format: int32
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        operationDefinition:
          $ref: '#/components/schemas/OperationDefinition'
        stepGenEnabled:
          type: boolean
          default: false
        deferredBy:
          type: string
        isEraCreated:
          type: boolean
          default: false
        isInternal:
          type: boolean
          default: false
        scheduleTime:
          type: string
        scheduleInfo:
          $ref: '#/components/schemas/ScheduleInfo'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigDTO'
        dependencyReport:
          $ref: '#/components/schemas/EraDependencyReport'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        skipDriverArgumentValidations:
          type: boolean
          default: false
        databaseType:
          type: string
        databaseDescription:
          type: string
        timeMachineInfo:
          $ref: '#/components/schemas/EraTimeMachineInfo'
        createDbserver:
          type: boolean
          default: false
        clustered:
          type: boolean
          default: false
        computeProfileId:
          type: string
        networkProfileId:
          type: string
        softwareProfileId:
          type: string
        softwareProfileVersionId:
          type: string
        dbParameterProfileId:
          type: string
        eraDeployBase:
          type: string
        nxClusterName:
          type: string
        nxClusterId:
          type: string
        dbserverId:
          type: string
        dbserverClusterId:
          type: string
        dbserverLogicalClusterId:
          type: string
        nodeCount:
          type: integer
          format: int32
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/ProvisionNodeInfo'
        newDbServerTimeZone:
          type: string
        newDbServerTimeZoneId:
          type: string
        workingDirectory:
          type: string
        sshPublicKey:
          type: string
        provisionType:
          type: string
        database:
          $ref: '#/components/schemas/ERADatabaseDTO'
        dbServerId:
          type: string
        dbClusterId:
          type: string
    Dbservers:
      type: object
      properties:
        remove:
          type: boolean
          description: This field is used to specify that the DBServer should be cleaned
            up
          default: false
        delete:
          type: boolean
          description: This is used to specify the DBServer VM has to be deleted from
            cluster.
          default: false
    DeRegisterDBServerModel:
      type: object
      properties:
        softRemove:
          type: boolean
          description: This field specified that no cleanup/deletion operation should
            be submitted
          default: false
        remove:
          type: boolean
          description: This field is used to specify that the DBServer should be cleaned
            up
          default: false
        delete:
          type: boolean
          description: This is used to specify the DBServer VM has to be deleted from
            cluster.
          default: false
        deleteVgs:
          type: boolean
          default: false
        deleteVmSnapshots:
          type: boolean
          default: false
      description: Deregister DBServer Model
      example:
        softRemove: false
        remove: false
        delete: true
        deleteVgs: true
        deleteVmSnapshots: true
    DeleteCloneModel:
      type: object
      properties:
        softRemove:
          type: boolean
          default: false
        remove:
          type: boolean
          default: false
        delete:
          type: boolean
          default: false
        forced:
          type: boolean
          default: false
        deleteDataDrives:
          type: boolean
          default: false
        deleteLogicalCluster:
          type: boolean
          default: false
        removeLogicalCluster:
          type: boolean
          default: false
        deleteTimeMachine:
          type: boolean
          default: false
      example:
        softRemove: false
        remove: false
        delete: true
        forced: true
        deleteDataDrives: false
        deleteLogicalCluster: true
        removeLogicalCluster: false
        deleteTimeMachine: true
    DeregisterDBServerClusterModel:
      type: object
      properties:
        delete:
          type: boolean
          default: false
        forced:
          type: boolean
          default: false
        softRemove:
          type: boolean
          default: false
        remove:
          type: boolean
          default: false
        dbservers:
          $ref: '#/components/schemas/Dbservers'
      description: Deregister DB Server Cluster Model
    DeregisterInfo:
      type: object
      properties:
        message:
          type: string
        operations:
          type: array
          items:
            type: string
    DriverPropertiesDTO:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyDefinition'
    ERAAlertDTO:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        entityType:
          type: string
        entityId:
          type: string
        entityName:
          type: string
        policyId:
          type: string
        operationId:
          type: string
        ownerId:
          type: string
        severity:
          type: string
        resetResolved:
          type: boolean
          default: false
        resolved:
          type: boolean
          default: false
        dateResolved:
          type: string
        resetAcknowledged:
          type: boolean
          default: false
        acknowledged:
          type: boolean
          default: false
        dateAcknowledged:
          type: string
        notified:
          type: boolean
          default: false
    ERAAlertPolicyDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        displayName:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        operation:
          type: string
        ownerId:
          type: string
        systemPolicy:
          type: boolean
          default: false
        severity:
          type: string
        resetSeverity:
          type: boolean
          default: false
        enabled:
          type: boolean
          default: false
        resetEnabled:
          type: boolean
          default: false
        deprecated:
          type: boolean
          default: false
    ERAAlertPurgeIntervalDTO:
      type: object
      properties:
        alertPurgeInterval:
          type: string
    ERAApplicationDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        cloudId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        primaryHost:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        timeMachineId:
          type: string
        parentTimeMachineId:
          type: string
        uniqueName:
          type: string
        clientId:
          type: string
        isInternal:
          type: boolean
          default: false
        applicationSlaTemplateId:
          type: string
        applicationSlaTemplateName:
          type: string
        applicationSlaPolicyId:
          type: string
        applicationSlaPolicyName:
          type: string
        policyStartTime:
          type: string
        hostTimeZone:
          type: string
        hostStatus:
          type: string
        hostIP:
          type: string
        parentTimeMachineName:
          type: string
        timeMachineInfo:
          $ref: '#/components/schemas/EraTimeMachineInfo'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDatabaseExpiryPolicy'
        clone:
          type: boolean
          default: false
    ERACloneDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        cloudId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        primaryHost:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        timeMachineId:
          type: string
        parentTimeMachineId:
          type: string
        uniqueName:
          type: string
        clientId:
          type: string
        isInternal:
          type: boolean
          default: false
        timeMachine:
          $ref: '#/components/schemas/ERATimeMachineDTO'
        applicationSlaTemplateId:
          type: string
        applicationSlaTemplateName:
          type: string
        applicationSlaPolicyId:
          type: string
        applicationSlaPolicyName:
          type: string
        policyStartTime:
          type: string
        hostTimeZone:
          type: string
        hostStatus:
          type: string
        hostIP:
          type: string
        parentTimeMachineName:
          type: string
        timeMachineInfo:
          $ref: '#/components/schemas/EraTimeMachineInfo'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDatabaseExpiryPolicy'
        cloneHost:
          type: string
        hostId:
          type: string
        clone:
          type: boolean
          default: false
    ERACloneNewDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        clustered:
          type: boolean
          default: false
        clone:
          type: boolean
          default: false
        eraCreated:
          type: boolean
          default: false
        placeholder:
          type: boolean
          default: false
        databaseName:
          type: string
        type:
          type: string
        databaseClusterType:
          type: string
        status:
          type: string
        databaseStatus:
          type: string
        dbserverLogicalClusterId:
          type: string
        timeMachineId:
          type: string
        parentTimeMachineId:
          type: string
        timeZone:
          type: string
        info:
          $ref: '#/components/schemas/ERADatabaseInfo'
        metadata:
          $ref: '#/components/schemas/ERADatabaseMetadata'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDatabaseExpiryPolicy'
        timeMachine:
          $ref: '#/components/schemas/ERATimeMachineNewDTO'
        dbserverlogicalCluster:
          $ref: '#/components/schemas/ERADBServerLogicalClusterDTO'
        databaseNodes:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseNodeDTO'
        parentTimeMachine:
          $ref: '#/components/schemas/ERATimeMachineNewDTO'
    ERACloud:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        ipAddresses:
          type: array
          items:
            type: string
        fqdns:
          type: array
          items:
            type: string
        description:
          type: string
        cloudType:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        version:
          type: string
        hypervisorType:
          type: string
        hypervisorVersion:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
    ERACloudDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        ipAddresses:
          type: array
          items:
            type: string
        fqdns:
          type: array
          items:
            type: string
        description:
          type: string
        cloudType:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        version:
          type: string
        hypervisorType:
          type: string
        hypervisorVersion:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        referenceCount:
          type: integer
          format: int32
        ip:
          type: string
        username:
          type: string
        password:
          type: string
        cloudInfo:
          $ref: '#/components/schemas/ERACloudInfo'
        resourceConfig:
          $ref: '#/components/schemas/EraClusterResourceConfigDTO'
        managementServerInfo:
          $ref: '#/components/schemas/ERAMgmtServerInfo'
    ERACloudInfo:
      type: object
      properties:
        clusterIp:
          type: string
        nameServers:
          type: array
          items:
            type: string
        ntpServers:
          type: array
          items:
            type: string
        timezone:
          type: string
        timezoneConfigFile:
          type: string
    ERACloudTypeDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        version:
          type: string
    ERADBServerClusterDTO:
      type: object
      properties:
        id:
          type: string
        eraCreated:
          type: boolean
          default: false
        name:
          type: string
        physicalClusterName:
          type: string
        ipAddresses:
          type: array
          items:
            type: string
        fqdns:
          type: array
          items:
            type: string
        description:
          type: string
        platformType:
          type: string
        databaseType:
          type: string
        status:
          type: string
        clusterStatus:
          type: string
        placeholder:
          type: boolean
          default: false
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        info:
          $ref: '#/components/schemas/ERADBServerClusterInfo'
        metadata:
          $ref: '#/components/schemas/ERADBServerClusterMetadata'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        dbservers:
          type: array
          items:
            $ref: '#/components/schemas/ERADBServerDTO'
        dbserverLogicalClusters:
          type: array
          items:
            $ref: '#/components/schemas/ERADBServerLogicalClusterDTO'
    ERADBServerClusterInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERADBServerClusterMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        vmUuids:
          uniqueItems: true
          type: array
          items:
            type: string
        createdDbservers:
          type: array
          items:
            type: string
        provisionOperationId:
          type: string
    ERADBServerDTO:
      type: object
      properties:
        id:
          type: string
        eraCreated:
          type: boolean
          default: false
        dbserverClusterId:
          type: string
        name:
          type: string
        description:
          type: string
        vmClusterName:
          type: string
        vmClusterUuid:
          type: string
        ipAddresses:
          type: array
          items:
            type: string
        fqdns:
          type: array
          items:
            type: string
        macAddresses:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - DBSERVER
          - ERA_SERVER
          - API_SERVER
          - ERA_AGENT
        placeholder:
          type: boolean
          default: false
        status:
          type: string
        clientId:
          type: string
        nxClusterId:
          type: string
        eraDriveId:
          type: string
        eraVersion:
          type: string
        vmTimeZone:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        vmInfo:
          $ref: '#/components/schemas/EraVmInfo'
        info:
          $ref: '#/components/schemas/ERADBServerInfo'
        metadata:
          $ref: '#/components/schemas/ERADBServerMetadata'
        metric:
          $ref: '#/components/schemas/ERADBServerMetric'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDbServerExpiryPolicy'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        clustered:
          type: boolean
          default: false
        requestedVersion:
          type: string
        is_server_driven:
          type: boolean
          default: false
        associated_time_machine_id:
          type: string
        time_machine_info:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        eraDrive:
          $ref: '#/components/schemas/EraDriveDTO'
        databases:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseDTO'
        clones:
          type: array
          items:
            $ref: '#/components/schemas/ERACloneDTO'
        accessKey:
          type: string
        softwareInstallations:
          type: array
          items:
            $ref: '#/components/schemas/ERASoftwareInstallationDTO'
        workingDirectory:
          type: string
        singleInstaceDatabases:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseDTO'
        databaseType:
          type: string
        associatedTimeMachineIds:
          uniqueItems: true
          type: array
          items:
            type: string
        accessKeyId:
          type: string
        clusteredDatabases:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseDTO'
        singleInstaceClones:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseDTO'
        clusteredClones:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseDTO'
        dbserverInValidEaState:
          type: boolean
          default: false
        singleIp:
          type: string
    ERADBServerInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        physicalEraDrive:
          type: boolean
          default: false
        clustered:
          type: boolean
          default: false
        singleInstance:
          type: boolean
          default: false
    ERADBServerLogicalClusterDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        eraCreated:
          type: boolean
          default: false
        description:
          type: string
        ipAddresses:
          type: array
          items:
            type: string
        fqdns:
          type: array
          items:
            type: string
        type:
          type: string
        status:
          type: string
        eaStatus:
          type: string
        placeholder:
          type: boolean
          default: false
        dbserverClusterId:
          type: string
        eraActivePolicy:
          $ref: '#/components/schemas/EraActivePolicy'
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        info:
          $ref: '#/components/schemas/ERADBServerLogicalClusterInfo'
        metadata:
          $ref: '#/components/schemas/ERADBServerLogicalClusterMetadata'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        logicalDbservers:
          type: array
          items:
            $ref: '#/components/schemas/ERALogicalDBServerDTO'
        dbserverCluster:
          $ref: '#/components/schemas/ERADBServerClusterDTO'
        databases:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseDTO'
        clones:
          type: array
          items:
            $ref: '#/components/schemas/ERACloneNewDTO'
        eaDbserverId:
          type: string
        primaryNodes:
          type: array
          items:
            $ref: '#/components/schemas/ERALogicalDBServerDTO'
        secondaryNodes:
          type: array
          items:
            $ref: '#/components/schemas/ERALogicalDBServerDTO'
        databaseType:
          type: string
    ERADBServerLogicalClusterInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERADBServerLogicalClusterMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        lastEaNodeId:
          type: string
        lastNominatedEaNodeId:
          type: string
        stickyEaDbserverId:
          type: string
        eaMessage:
          type: string
        databaseType:
          type: string
        clusterBreakDownTimeForEa:
          type: string
        reEvaluateEa:
          type: boolean
          default: false
        scaledUpDbservers:
          uniqueItems: true
          type: array
          items:
            type: string
        toBeRemovedDbservers:
          uniqueItems: true
          type: array
          items:
            type: string
    ERADBServerMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        databaseType:
          type: string
        physicalEraDrive:
          type: boolean
          default: false
        clustered:
          type: boolean
          default: false
        singleInstance:
          type: boolean
          default: false
        eraDriveInitialised:
          type: boolean
          default: false
        provisionOperationId:
          type: string
        markedForDeletion:
          type: boolean
          default: false
        associatedTimeMachines:
          uniqueItems: true
          type: array
          items:
            type: string
    ERADBServerMetric:
      type: object
      properties:
        lastUpdatedTimeInUTC:
          type: string
        compute:
          $ref: '#/components/schemas/ERAVMInfo'
        memory:
          $ref: '#/components/schemas/ERAMemoryInfo'
        storage:
          $ref: '#/components/schemas/ERAStorageInfo'
    ERADatabaseCommonDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        clustered:
          type: boolean
          default: false
        clone:
          type: boolean
          default: false
        eraCreated:
          type: boolean
          default: false
        placeholder:
          type: boolean
          default: false
        databaseName:
          type: string
        type:
          type: string
        databaseClusterType:
          type: string
        status:
          type: string
        databaseStatus:
          type: string
        dbserverLogicalClusterId:
          type: string
        timeMachineId:
          type: string
        parentTimeMachineId:
          type: string
        timeZone:
          type: string
        info:
          $ref: '#/components/schemas/ERADatabaseInfo'
        metadata:
          $ref: '#/components/schemas/ERADatabaseMetadata'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDatabaseExpiryPolicy'
        dbserverlogicalCluster:
          $ref: '#/components/schemas/ERADBServerLogicalClusterDTO'
        databaseNodes:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseNodeDTO'
    ERADatabaseDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        clustered:
          type: boolean
          default: false
        clone:
          type: boolean
          default: false
        eraCreated:
          type: boolean
          default: false
        placeholder:
          type: boolean
          default: false
        databaseName:
          type: string
        type:
          type: string
        databaseClusterType:
          type: string
        status:
          type: string
        databaseStatus:
          type: string
        dbserverLogicalClusterId:
          type: string
        timeMachineId:
          type: string
        parentTimeMachineId:
          type: string
        timeZone:
          type: string
        info:
          $ref: '#/components/schemas/ERADatabaseInfo'
        metadata:
          $ref: '#/components/schemas/ERADatabaseMetadata'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDatabaseExpiryPolicy'
        databaseNodes:
          type: array
          items:
            $ref: '#/components/schemas/ERADatabaseNodeDTO'
    ERADatabaseInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERADatabaseMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        tmActivateOperationId:
          type: string
        createdDbservers:
          type: array
          items:
            type: string
        lastRefreshTimestamp:
          type: string
        lastRequestedRefreshTimestamp:
          type: string
        stateBeforeRefresh:
          type: string
        stateBeforeRestore:
          type: string
        stateBeforeScaling:
          type: string
        logCatchUpForRestoreDispatched:
          type: boolean
          default: false
        lastLogCatchUpForRestoreOperationId:
          type: string
    ERADatabaseNodeDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        databaseId:
          type: string
        status:
          type: string
        databaseStatus:
          type: string
        primary:
          type: boolean
          default: false
        dbserverId:
          type: string
        softwareInstallationId:
          type: string
        protectionDomainId:
          type: string
        info:
          $ref: '#/components/schemas/ERADatabaseNodeInfo'
        metadata:
          $ref: '#/components/schemas/ERADatabaseNodeMetadata'
        protectionDomain:
          $ref: '#/components/schemas/ERAProtectionDomainDTO'
        activated:
          type: boolean
          default: false
        validEaState:
          type: boolean
          default: false
    ERADatabaseNodeInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERADatabaseNodeMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        stateBeforeRestore:
          type: string
    ERADbLogInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERADbLogMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
    ERADriveMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
    ERAGoldCopyDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        cloudId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        primaryHost:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        associatedTimeMachineId:
          type: string
        protectionDomainId:
          type: string
        eraGoldCopySnapShotList:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ERASnapshot'
        policyId:
          type: string
        goldCopyMode:
          type: string
        protectionDomain:
          $ref: '#/components/schemas/ERAProtectionDomainDTO'
    ERALogicalDBServerDTO:
      type: object
      properties:
        dbserverId:
          type: string
        dbserverLogicalClusterId:
          type: string
        eraActive:
          type: boolean
          default: false
        primary:
          type: boolean
          default: false
        backupPriority:
          type: integer
          format: int32
        status:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        info:
          $ref: '#/components/schemas/ERALogicalDBServerInfo'
        metadata:
          $ref: '#/components/schemas/ERALogicalDBServerMetadata'
        dbserver:
          $ref: '#/components/schemas/ERADBServerDTO'
    ERALogicalDBServerInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERALogicalDBServerMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        lastNominationFailed:
          type: boolean
          default: false
        lastNominationTime:
          type: string
    ERAMemoryInfo:
      type: object
      properties:
        lastUpdatedTimeInUTC:
          type: string
        memory:
          type: integer
          format: int64
        memoryUsagePpm:
          type: array
          items:
            type: integer
            format: int64
        unit:
          type: string
          enum:
          - B
          - KB
          - MB
          - GB
          - TB
    ERAMgmtServerInfo:
      type: object
      properties:
        ip:
          type: string
        type:
          type: string
        username:
          type: string
        password:
          type: string
        version:
          type: string
        status:
          type: string
          enum:
          - READY
          - UNKNOWN
          - UNREACHABLE
    ERAProfileDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        owner:
          type: string
        engineType:
          type: string
        type:
          type: string
        nxClusterId:
          type: string
        topology:
          type: string
        dbVersion:
          type: string
        systemProfile:
          type: boolean
          default: false
        custom1:
          type: string
        custom2:
          type: string
        custom3:
          type: string
        custom4:
          type: string
        custom5:
          type: string
        assocDbServers:
          type: array
          items:
            type: string
        assocDatabases:
          type: array
          items:
            type: string
        latestVersion:
          type: string
        latestVersionId:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/EraProfileVersionDTO'
    ERAPropertyDefinition:
      type: object
      properties:
        ref_id:
          type: string
        name:
          type: string
        type:
          type: string
        value_type:
          type: string
        category:
          type: string
        regex:
          type: string
        secure:
          type: string
        required:
          type: string
        custom1:
          type: string
        custom2:
          type: string
        custom3:
          type: string
        default_value:
          type: string
        sensitive:
          type: string
        display_name:
          type: string
        description:
          type: string
        index:
          type: integer
          format: int32
        alias:
          type: string
        parameterized_display_name:
          type: string
        parameterized_description:
          type: string
        isDuplicable:
          type: string
    ERAPropertyValue:
      type: object
      properties:
        ref_id:
          type: string
        name:
          type: string
        value:
          type: string
        secure:
          type: boolean
          default: false
        description:
          type: string
    ERAProtectionDomainDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        cloudId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        primaryHost:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        eraCreated:
          type: boolean
          default: false
        assocEntities:
          type: array
          items:
            type: string
    ERAScheduleTime:
      type: object
      properties:
        hours:
          type: integer
          format: int32
        minutes:
          type: integer
          format: int32
        seconds:
          type: integer
          format: int32
        extra:
          type: boolean
          default: false
        validScheduleTime:
          type: boolean
          default: false
        repeatIntervalInMinutes:
          type: integer
          format: int32
    ERASnapshot:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        snapshotId:
          type: string
        snapshotUuid:
          type: string
        protectionDomainId:
          type: string
        timeMachineId:
          type: string
        databaseNodeId:
          type: string
        appInfoVersion:
          type: string
        status:
          type: string
        type:
          type: string
        applicableTypes:
          type: array
          items:
            type: string
        snapshotTimeStamp:
          type: string
        info:
          $ref: '#/components/schemas/ERASnapshotInfo'
        metadata:
          $ref: '#/components/schemas/ERASnapshotMetadata'
        typeFrequency:
          type: string
          enum:
          - NONE
          - CONTINUOUS_EXTRA
          - TRANSIENT
          - CONTINUOUS_RETRY
          - DISCRETE
          - MANUAL
          - CONTINUOUS
          - HOURLY
          - DAILY
          - WEEKLY
          - MONTHLY
          - QUARTERLY
          - YEARLY
        applicableTypeFrequencies:
          type: array
          items:
            type: string
            enum:
            - NONE
            - CONTINUOUS_EXTRA
            - TRANSIENT
            - CONTINUOUS_RETRY
            - DISCRETE
            - MANUAL
            - CONTINUOUS
            - HOURLY
            - DAILY
            - WEEKLY
            - MONTHLY
            - QUARTERLY
            - YEARLY
    ERASnapshotDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        snapshotId:
          type: string
        snapshotUuid:
          type: string
        protectionDomainId:
          type: string
        timeMachineId:
          type: string
        databaseNodeId:
          type: string
        appInfoVersion:
          type: string
        status:
          type: string
        type:
          type: string
        applicableTypes:
          type: array
          items:
            type: string
        snapshotTimeStamp:
          type: string
        info:
          $ref: '#/components/schemas/ERASnapshotInfo'
        metadata:
          $ref: '#/components/schemas/ERASnapshotMetadata'
        timeZone:
          type: string
        snapshotSize:
          type: string
        processed:
          type: boolean
          default: false
        databaseSnapshot:
          type: boolean
          default: false
        fromTimeStamp:
          type: string
        toTimeStamp:
          type: string
        dbserverId:
          type: string
        dbserverName:
          type: string
        dbserverIp:
          type: string
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraEntityExpiryPolicy'
        typeFrequency:
          type: string
          enum:
          - NONE
          - CONTINUOUS_EXTRA
          - TRANSIENT
          - CONTINUOUS_RETRY
          - DISCRETE
          - MANUAL
          - CONTINUOUS
          - HOURLY
          - DAILY
          - WEEKLY
          - MONTHLY
          - QUARTERLY
          - YEARLY
        applicableTypeFrequencies:
          type: array
          items:
            type: string
            enum:
            - NONE
            - CONTINUOUS_EXTRA
            - TRANSIENT
            - CONTINUOUS_RETRY
            - DISCRETE
            - MANUAL
            - CONTINUOUS
            - HOURLY
            - DAILY
            - WEEKLY
            - MONTHLY
            - QUARTERLY
            - YEARLY
    ERASnapshotFilesInfo:
      type: object
      properties:
        category:
          type: string
        file_list:
          type: object
          properties: {}
    ERASnapshotInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
    ERASnapshotMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        fromTimeStamp:
          type: string
        toTimeStamp:
          type: string
    ERASoftwareInstallationDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        eraCreated:
          type: boolean
          default: false
        type:
          type: string
        dbserverId:
          type: string
        softwareProfileId:
          type: string
        softwareProfileVersionId:
          type: string
        version:
          type: string
        ownerId:
          type: string
        info:
          type: object
          properties: {}
        metadata:
          $ref: '#/components/schemas/ERASoftwareInstallationMetadata'
        dateCreated:
          type: string
        dateModified:
          type: string
    ERASoftwareInstallationMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
    ERAStatusDTO:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        info:
          type: object
          properties: {}
        errorCode:
          type: integer
          format: int32
    ERAStorageInfo:
      type: object
      properties:
        lastUpdatedTimeInUTC:
          type: string
        controllerNumIops:
          type: array
          items:
            type: integer
            format: int64
        controllerAvgIoLatencyUsecs:
          type: array
          items:
            type: integer
            format: int64
        size:
          type: integer
          format: int64
        allocatedSize:
          type: integer
          format: int64
        usedSize:
          type: integer
          format: int64
        unit:
          type: string
          enum:
          - B
          - KB
          - MB
          - GB
          - TB
    ERATimeMachineDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        cloudId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        primaryHost:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        eraApplicationId:
          type: string
        eraGoldCopyId:
          type: string
        slaId:
          type: string
        policyId:
          type: string
        policyStartTime:
          type: string
        uniqueName:
          type: string
        logDriveId:
          type: string
        isInternal:
          type: boolean
          default: false
        slaName:
          type: string
        policyName:
          type: string
        applicationName:
          type: string
        applicationType:
          type: string
        resetSla:
          type: boolean
          default: false
        resetPolicy:
          type: boolean
          default: false
        scope:
          type: string
        goldCopy:
          $ref: '#/components/schemas/ERAGoldCopyDTO'
        clones:
          type: array
          items:
            $ref: '#/components/schemas/ERACloneNewDTO'
        application:
          $ref: '#/components/schemas/ERAApplicationDTO'
        schedule:
          $ref: '#/components/schemas/EraScheduleDTO'
        sla:
          $ref: '#/components/schemas/EraSlaDTO'
        logDrive:
          $ref: '#/components/schemas/EraLogDriveDTO'
        continuousRecoveryEnabled:
          type: boolean
          default: false
        operationHistory:
          $ref: '#/components/schemas/EraTMOperationHistory'
        slaEnabled:
          type: boolean
          default: false
        activeSlaAndSchedule:
          type: boolean
          default: false
    ERATimeMachineInfo:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        incompatibleLogs:
          type: boolean
          default: false
    ERATimeMachineMetadata:
      type: object
      properties:
        secureInfo:
          type: object
          properties: {}
        info:
          type: object
          properties: {}
        deregisterInfo:
          $ref: '#/components/schemas/DeregisterInfo'
        capabilityResetTime:
          type: string
        autoHeal:
          type: boolean
          default: false
        autoHealSnapshotCount:
          type: integer
          format: int32
        autoHealLogCatchupCount:
          type: integer
          format: int32
        firstSnapshotCaptured:
          type: boolean
          default: false
        firstSnapshotDispatched:
          type: boolean
          default: false
        lastSnapshotTime:
          type: string
        lastAutoSnapshotTime:
          type: string
        lastSnapshotOperationId:
          type: string
        lastAutoSnapshotOperationId:
          type: string
        lastSuccessfulSnapshotOperationId:
          type: string
        snapshotSuccessiveFailureCount:
          type: integer
          format: int32
        lastHealSnapshotOperation:
          type: string
        lastLogCatchupTime:
          type: string
        lastSuccessfulLogCatchupOperationId:
          type: string
        lastLogCatchupOperationId:
          type: string
        logCatchupSuccessiveFailureCount:
          type: integer
          format: int32
        lastPauseTime:
          type: string
        lastPauseByForce:
          type: boolean
          default: false
        lastResumeTime:
          type: string
        lastPauseReason:
          type: string
        stateBeforeRestore:
          type: string
        lastHealthAlertedTime:
          type: string
        lastEaBreakdownTime:
          type: string
        authorizedDbservers:
          uniqueItems: true
          type: array
          items:
            type: string
        lastHealTime:
          type: string
        lastHealSystemTriggered:
          type: boolean
          default: false
    ERATimeMachineNewDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        clustered:
          type: boolean
          default: false
        clone:
          type: boolean
          default: false
        databaseId:
          type: string
        logDriveId:
          type: string
        type:
          type: string
        status:
          type: string
        eaStatus:
          type: string
        scope:
          type: string
        slaId:
          type: string
        scheduleId:
          type: string
        ownerId:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        info:
          $ref: '#/components/schemas/ERATimeMachineInfo'
        metadata:
          $ref: '#/components/schemas/ERATimeMachineMetadata'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        logDrive:
          $ref: '#/components/schemas/EraLogDriveDTO'
        sla:
          $ref: '#/components/schemas/EraSlaDTO'
        schedule:
          $ref: '#/components/schemas/EraScheduleDTO'
        database:
          $ref: '#/components/schemas/ERADatabaseCommonDTO'
        clones:
          type: array
          items:
            $ref: '#/components/schemas/ERACloneNewDTO'
        zeroSla:
          type: boolean
          default: false
        slaSet:
          type: boolean
          default: false
        continuousRecoveryEnabled:
          type: boolean
          default: false
        snapshotableState:
          type: boolean
          default: false
    ERAUser:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        customerId:
          type: string
        email:
          type: string
        internalUser:
          type: boolean
          default: false
        password:
          type: string
        passwordHint:
          type: string
        eulaAccepted:
          type: boolean
          default: false
        passwordExpired:
          type: boolean
          default: false
        resetProfile:
          type: boolean
          default: false
        encrypted:
          type: boolean
          default: false
        isExternalAuth:
          type: boolean
          default: false
        unresetProfile:
          type: boolean
          default: false
        roles:
          type: array
          items:
            type: string
        privilegeEndpoints:
          uniqueItems: true
          type: array
          items:
            type: string
        state:
          type: string
        properties:
          $ref: '#/components/schemas/ERAUserProperties'
        directoryId:
          type: string
        groups:
          type: array
          items:
            type: string
        rolesGroupMapping:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
    ERAUserNotificationProperties:
      type: object
      properties:
        notifyOnOpComplete:
          type: boolean
          default: false
        notifyOnOpFailure:
          type: boolean
          default: false
        notifyAlerts:
          type: boolean
          default: false
    ERAUserProperties:
      type: object
      properties:
        uiTimeZone:
          type: string
        uiTimeout:
          type: number
          format: float
        notificationProps:
          $ref: '#/components/schemas/ERAUserNotificationProperties'
    ERAVMInfo:
      type: object
      properties:
        numVCPUs:
          type: integer
          format: int64
        numCoresPerVCPU:
          type: integer
          format: int64
        hypervisorCpuUsagePpm:
          type: array
          items:
            type: integer
            format: int64
        lastUpdatedTimeInUTC:
          type: string
    EraActivePolicy:
      type: object
      properties:
        driverDriven:
          type: boolean
          default: false
        staticEaPolicy:
          $ref: '#/components/schemas/EraStaticEaPolicy'
        electionMessage:
          type: string
    EraClusterResourceConfigDTO:
      type: object
      properties:
        storageThresholdPercentage:
          type: number
          format: double
        memoryThresholdPercentage:
          type: number
          format: double
    EraContinuousRegion:
      type: object
      properties:
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/ERASnapshotDTO'
        dbLogs:
          type: array
          items:
            $ref: '#/components/schemas/EraDbLogDTO'
        fromTime:
          type: string
        toTime:
          type: string
        processedRanges:
          type: array
          items:
            $ref: '#/components/schemas/PairStringString'
        unprocessedRanges:
          type: array
          items:
            $ref: '#/components/schemas/PairStringString'
        lastEntry:
          $ref: '#/components/schemas/EraDbLogDTO'
        valid:
          type: boolean
          default: false
    EraContinuousSchedule:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        logBackupInterval:
          type: integer
          format: int32
        snapshotsPerDay:
          type: integer
          format: int32
        logBackupRepeatIntervalInMinutes:
          type: integer
          format: int32
        snapshotRepeatIntervalInMinutes:
          type: integer
          format: int32
    EraDailySchedule:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
    EraDatabaseExpiryPolicy:
      type: object
      properties:
        remindBeforeInDays:
          type: integer
          format: int32
        effectiveTimestamp:
          type: string
        expiryTimestamp:
          type: string
        expiryDateTimezone:
          type: string
        userCreated:
          type: boolean
          default: false
        expireInDays:
          type: integer
          format: int32
        deleteDatabase:
          type: boolean
          default: false
        deleteTimeMachine:
          type: boolean
          default: false
        deleteVM:
          type: boolean
          default: false
    EraDbLog:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        eraLogDriveId:
          type: string
        databaseNodeId:
          type: string
        fromTime:
          type: string
        toTime:
          type: string
        status:
          type: string
        size:
          type: integer
          format: int64
        info:
          $ref: '#/components/schemas/ERADbLogInfo'
        metadata:
          $ref: '#/components/schemas/ERADbLogMetadata'
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
    EraDbLogDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        eraLogDriveId:
          type: string
        databaseNodeId:
          type: string
        fromTime:
          type: string
        toTime:
          type: string
        status:
          type: string
        size:
          type: integer
          format: int64
        info:
          $ref: '#/components/schemas/ERADbLogInfo'
        metadata:
          $ref: '#/components/schemas/ERADbLogMetadata'
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        message:
          type: string
        unprocessed:
          type: boolean
          default: false
        logCopyOperationId:
          type: string
    EraDbServerExpiryPolicy:
      type: object
      properties:
        remindBeforeInDays:
          type: integer
          format: int32
        effectiveTimestamp:
          type: string
        expiryTimestamp:
          type: string
        expiryDateTimezone:
          type: string
        userCreated:
          type: boolean
          default: false
        expireInDays:
          type: integer
          format: int32
        deleteVM:
          type: boolean
          default: false
    EraDependencyInfo:
      type: object
      properties:
        dependencyName:
          type: string
        description:
          type: string
        requiredAction:
          type: string
        isPresent:
          type: boolean
          default: false
        isSoftware:
          type: boolean
          default: false
        name:
          type: string
    EraDependencyReport:
      type: object
      properties:
        ipAddress:
          type: string
        missingDependencies:
          type: array
          items:
            $ref: '#/components/schemas/EraDependencyInfo'
        missingConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/EraDependencyInfo'
        dependenciesSatisfied:
          type: boolean
          default: false
        dependenciesVerified:
          type: boolean
          default: false
    EraDriveDTO:
      type: object
      properties:
        id:
          type: string
        path:
          type: string
        hostId:
          type: string
        vgUuid:
          type: string
        clusterId:
          type: string
        protectionDomainId:
          type: string
        eraCreated:
          type: boolean
          default: false
        status:
          type: string
        totalSize:
          type: integer
          format: int32
        usedSize:
          type: integer
          format: int32
        info:
          type: object
          additionalProperties:
            type: object
            properties: {}
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        metadata:
          $ref: '#/components/schemas/ERADriveMetadata'
        eraDisks:
          type: array
          items:
            $ref: '#/components/schemas/EraDriveDiskDTO'
        message:
          type: string
    EraDriveDiskDTO:
      type: object
      properties:
        id:
          type: string
        vdiskUuid:
          type: string
        timeMachineId:
          type: string
        eraDriveId:
          type: string
        eraCreated:
          type: boolean
          default: false
        status:
          type: string
        type:
          type: string
        totalSize:
          type: integer
          format: int32
        usedSize:
          type: integer
          format: int32
        info:
          type: object
          additionalProperties:
            type: object
            properties: {}
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        message:
          type: string
    EraEntityExpiryPolicy:
      type: object
      properties:
        remindBeforeInDays:
          type: integer
          format: int32
        effectiveTimestamp:
          type: string
        expiryTimestamp:
          type: string
        expiryDateTimezone:
          type: string
        userCreated:
          type: boolean
          default: false
        expireInDays:
          type: integer
          format: int32
    EraEntityRefreshPolicy:
      type: object
      properties:
        refreshInDays:
          type: integer
          format: int32
        refreshInHours:
          type: integer
          format: int32
        refreshInMonths:
          type: integer
          format: int32
        lastRefreshDate:
          type: string
        nextRefreshDate:
          type: string
        refreshTime:
          type: string
        refreshDateTimezone:
          type: string
    EraEntityShortInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
    EraIPAddress:
      type: object
      properties:
        ip:
          type: string
        profileID:
          type: string
        dbserverID:
          type: string
        alertID:
          type: string
        profileName:
          type: string
        dbserverName:
          type: string
        alertMessage:
          type: string
        status:
          type: string
          enum:
          - Available
          - Reserved
          - InUse
          - Error
    EraIPAddressPool:
      type: object
      properties:
        id:
          type: string
        startIP:
          type: string
        endIP:
          type: string
        lastModified:
          type: string
        modifiedBy:
          type: string
        ipAddresses:
          type: array
          items:
            $ref: '#/components/schemas/EraIPAddress'
    EraLCMConfigDTO:
      type: object
      properties:
        dbServerLCMConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDbServerExpiryPolicy'
        databaseLCMConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraDatabaseExpiryPolicy'
        snapshotLCMConfig:
          $ref: '#/components/schemas/EraLCMConfigInfoEraEntityExpiryPolicy'
    EraLCMConfigInfoEraDatabaseExpiryPolicy:
      type: object
      properties:
        expiryDetails:
          $ref: '#/components/schemas/EraDatabaseExpiryPolicy'
        refreshDetails:
          $ref: '#/components/schemas/EraEntityRefreshPolicy'
        preDeleteCommand:
          $ref: '#/components/schemas/EraPreDeleteCommand'
        postDeleteCommand:
          $ref: '#/components/schemas/EraPostDeleteCommand'
    EraLCMConfigInfoEraDbServerExpiryPolicy:
      type: object
      properties:
        expiryDetails:
          $ref: '#/components/schemas/EraDbServerExpiryPolicy'
        refreshDetails:
          $ref: '#/components/schemas/EraEntityRefreshPolicy'
        preDeleteCommand:
          $ref: '#/components/schemas/EraPreDeleteCommand'
        postDeleteCommand:
          $ref: '#/components/schemas/EraPostDeleteCommand'
    EraLCMConfigInfoEraEntityExpiryPolicy:
      type: object
      properties:
        expiryDetails:
          $ref: '#/components/schemas/EraEntityExpiryPolicy'
        refreshDetails:
          $ref: '#/components/schemas/EraEntityRefreshPolicy'
        preDeleteCommand:
          $ref: '#/components/schemas/EraPreDeleteCommand'
        postDeleteCommand:
          $ref: '#/components/schemas/EraPostDeleteCommand'
    EraLogDriveDTO:
      type: object
      properties:
        id:
          type: string
        path:
          type: string
        vgUuid:
          type: string
        timeMachineId:
          type: string
        clusterId:
          type: string
        protectionDomainId:
          type: string
        status:
          type: string
        totalSize:
          type: integer
          format: int32
        usedSize:
          type: integer
          format: int32
        info:
          type: object
          additionalProperties:
            type: object
            properties: {}
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        metadata:
          $ref: '#/components/schemas/ERADriveMetadata'
        logDisks:
          type: array
          items:
            $ref: '#/components/schemas/EraLogDriveDiskDTO'
        message:
          type: string
    EraLogDriveDiskDTO:
      type: object
      properties:
        id:
          type: string
        vdiskUuid:
          type: string
        eraLogDriveId:
          type: string
        status:
          type: string
        totalSize:
          type: integer
          format: int32
        usedSize:
          type: integer
          format: int32
        info:
          type: object
          additionalProperties:
            type: object
            properties: {}
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        message:
          type: string
    EraMonthlySchedule:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        dayOfMonth:
          type: integer
          format: int32
    EraOperationMetadata:
      type: object
      properties:
        linkedOperations:
          type: array
          items:
            $ref: '#/components/schemas/LinkedOperation'
        associatedEntities:
          type: array
          items:
            $ref: '#/components/schemas/EraEntityShortInfo'
        oldStatus:
          type: string
        userRequestedAction:
          type: string
        userRequestedActionTimestamp:
          type: string
        controlMessage:
          type: string
        executionContext:
          $ref: '#/components/schemas/ExecutionContext'
        scheduleTime:
          type: string
        scheduledBy:
          type: string
        scheduledOn:
          type: string
        retryParentId:
          type: string
        retryImmediateParentId:
          type: string
        retriedOperations:
          uniqueItems: true
          type: array
          items:
            type: string
        switchedDbservers:
          uniqueItems: true
          type: array
          items:
            type: string
        linkedOperationsDescription:
          type: string
    EraOperationShortInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        status:
          type: string
        systemTriggered:
          type: boolean
          default: false
        userVisible:
          type: boolean
          default: false
        dbserverId:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        percentageComplete:
          type: string
        entityId:
          type: string
        entityName:
          type: string
        entityType:
          type: string
        dateSubmitted:
          type: string
        ownerId:
          type: string
        deferredBy:
          type: string
        scheduleTime:
          type: string
        isInternal:
          type: boolean
          default: false
    EraOperationsSummaryDTO:
      type: object
      properties:
        systemTriggered:
          type: boolean
          default: false
        userTriggered:
          type: boolean
          default: false
        totalCount:
          type: integer
          format: int64
        unassignedCount:
          type: integer
          format: int64
        runningCount:
          type: integer
          format: int64
        successfulCount:
          type: integer
          format: int64
        failedCount:
          type: integer
          format: int64
        expiredCount:
          type: integer
          format: int64
        avgProgressOfRunningOperations:
          type: number
          format: double
        eraServerTimestamp:
          type: string
        timezone:
          type: string
    EraOperationsSummaryInfoDTO:
      type: object
      properties:
        summary:
          $ref: '#/components/schemas/EraOperationsSummaryDTO'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/EraOperationShortInfo'
    EraParentOperationDTO:
      type: object
      properties:
        id:
          type: string
        stepIndex:
          type: integer
          format: int32
        operation:
          $ref: '#/components/schemas/OperationDefinition'
    EraPostDeleteCommand:
      type: object
      properties:
        command:
          type: string
    EraPreDeleteCommand:
      type: object
      properties:
        command:
          type: string
    EraProfileVersionDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        owner:
          type: string
        engineType:
          type: string
        type:
          type: string
        nxClusterId:
          type: string
        topology:
          type: string
        dbVersion:
          type: string
        systemProfile:
          type: boolean
          default: false
        custom1:
          type: string
        custom2:
          type: string
        custom3:
          type: string
        custom4:
          type: string
        custom5:
          type: string
        assocDbServers:
          type: array
          items:
            type: string
        assocDatabases:
          type: array
          items:
            type: string
        version:
          type: string
        profileId:
          type: string
        published:
          type: boolean
          default: false
        deprecated:
          type: boolean
          default: false
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        propertiesMap:
          type: object
          additionalProperties:
            type: string
        json:
          $ref: '#/components/schemas/JSONObject'
    EraQuarterlySchedule:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        startMonth:
          type: string
        startMonthValue:
          type: string
          enum:
          - JANUARY
          - FEBRUARY
          - MARCH
          - APRIL
          - MAY
          - JUNE
          - JULY
          - AUGUST
          - SEPTEMBER
          - OCTOBER
          - NOVEMBER
          - DECEMBER
        dayOfMonth:
          type: integer
          format: int32
    EraScheduleDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        description:
          type: string
        ownerId:
          type: string
        systemPolicy:
          type: boolean
          default: false
        globalPolicy:
          type: boolean
          default: false
        dateCreated:
          type: string
        dateModified:
          type: string
        snapshotTimeOfDay:
          $ref: '#/components/schemas/ERAScheduleTime'
        continuousSchedule:
          $ref: '#/components/schemas/EraContinuousSchedule'
        dailySchedule:
          $ref: '#/components/schemas/EraDailySchedule'
        weeklySchedule:
          $ref: '#/components/schemas/EraWeeklySchedule'
        monthlySchedule:
          $ref: '#/components/schemas/EraMonthlySchedule'
        yearlySchedule:
          $ref: '#/components/schemas/EraYearlySchedule'
        referenceCount:
          type: integer
          format: int32
        startTime:
          type: string
        continuousScheduleEnabled:
          type: boolean
          default: false
        quartelySchedule:
          $ref: '#/components/schemas/EraQuarterlySchedule'
    EraSlaDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        description:
          type: string
        ownerId:
          type: string
        systemSla:
          type: boolean
          default: false
        dateCreated:
          type: string
        dateModified:
          type: string
        continuousRetention:
          type: integer
          format: int32
        dailyRetention:
          type: integer
          format: int32
        weeklyRetention:
          type: integer
          format: int32
        monthlyRetention:
          type: integer
          format: int32
        quarterlyRetention:
          type: integer
          format: int32
        yearlyRetention:
          type: integer
          format: int32
        referenceCount:
          type: integer
          format: int32
      example:
        name: SLAName
        description: SLADescription
        continuousRetention: 25
        dailyRetention: 7
        weeklyRetention: 2
        monthlyRetention: 5
        quarterlyRetention: 1
    EraSnapshotLogListDTO:
      type: object
      properties:
        mode:
          type: string
        from:
          type: string
        to:
          type: string
        timeUnit:
          type: string
        timeUnitNumber:
          type: string
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/ERASnapshotDTO'
        continuousRegion:
          $ref: '#/components/schemas/EraContinuousRegion'
    EraStaticEaPolicy:
      type: object
      properties:
        any:
          type: boolean
          default: false
        primaryOnly:
          type: boolean
          default: false
        secondaryOnly:
          type: boolean
          default: false
        preferSecondary:
          type: boolean
          default: false
        preferPrimary:
          type: boolean
          default: false
        prefrenceString:
          type: string
    EraTMOperationHistory:
      type: object
      properties:
        autoCorrectSnapshotCount:
          type: integer
          format: int32
        autoCorrectLogCatchupCount:
          type: integer
          format: int32
    EraTagDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        owner:
          type: string
        required:
          type: boolean
          default: false
        status:
          type: string
          enum:
          - ENABLED
          - DEPRECATED
        entityType:
          type: string
          enum:
          - DATABASE
          - TIME_MACHINE
          - DATABASE_SERVER
          - CLONE
        values:
          type: integer
          format: int32
    EraTagValueDTO:
      type: object
      properties:
        tagId:
          type: string
        entityId:
          type: string
        entityType:
          type: string
          enum:
          - DATABASE
          - TIME_MACHINE
          - DATABASE_SERVER
          - CLONE
        value:
          type: string
        tagName:
          type: string
    EraTimeMachineCapability:
      type: object
      properties:
        timeMachineId:
          type: string
        outputTimeZone:
          type: string
        type:
          type: string
        overallContinuousRangeEndTime:
          type: string
        lastContinuousSnapshotTime:
          type: string
        logCatchupStartTime:
          type: string
        capability:
          type: array
          items:
            $ref: '#/components/schemas/EraSnapshotLogListDTO'
        capabilityResetTime:
          type: string
        lastDbLog:
          $ref: '#/components/schemas/EraDbLog'
        healWithResetCapability:
          type: boolean
          default: false
        lastContinuousSnapshot:
          $ref: '#/components/schemas/ERASnapshotDTO'
    EraTimeMachineInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slaId:
          type: string
        scheduleId:
          type: string
        schedule:
          $ref: '#/components/schemas/EraScheduleDTO'
        autoTuneLogDrive:
          type: boolean
          default: false
        unlimitedLogDrive:
          type: boolean
          default: false
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
    EraVlanDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        clusterId:
          type: string
        managed:
          type: boolean
          default: false
        ipPools:
          type: array
          items:
            $ref: '#/components/schemas/EraIPAddressPool'
        ipAddresses:
          type: array
          items:
            $ref: '#/components/schemas/EraIPAddress'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        propertiesMap:
          type: object
          additionalProperties:
            type: string
    EraVmInfo:
      type: object
      properties:
        osType:
          type: string
        osVersion:
          type: string
        distribution:
          type: string
    EraWeeklySchedule:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        dayOfWeek:
          type: string
        dayOfWeekValue:
          type: string
          enum:
          - SUNDAY
          - MONDAY
          - TUESDAY
          - WEDNESDAY
          - THURSDAY
          - FRIDAY
          - SATURDAY
    EraYearlySchedule:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        month:
          type: string
        monthValue:
          type: string
          enum:
          - JANUARY
          - FEBRUARY
          - MARCH
          - APRIL
          - MAY
          - JUNE
          - JULY
          - AUGUST
          - SEPTEMBER
          - OCTOBER
          - NOVEMBER
          - DECEMBER
        dayOfMonth:
          type: integer
          format: int32
    ExecutionContext:
      type: object
      properties:
        affectedDBServers:
          uniqueItems: true
          type: array
          items:
            type: string
        extendedAffectedDBServers:
          uniqueItems: true
          type: array
          items:
            type: string
        applicationType:
          type: string
    ExpiryDetails:
      type: object
      properties:
        expiryDateTimezone:
          type: string
        expireInDays:
          type: integer
          format: int32
    IpPools:
      type: object
      properties:
        startIP:
          type: string
        endIP:
          type: string
    JSONObject:
      type: object
    LcmConfig:
      type: object
      properties:
        snapshotLCMConfig:
          $ref: '#/components/schemas/SnapshotLCMConfig'
    LcmConfigForClone:
      type: object
      properties:
        databaseLCMConfig:
          $ref: '#/components/schemas/DatabaseLCMConfig'
    LinkedOperation:
      type: object
      properties:
        label:
          type: string
        displayMessage:
          type: string
        operationId:
          type: string
        primary:
          type: boolean
          default: false
    ManagementServerInfo:
      type: object
      properties:
        ip:
          type: string
        type:
          type: string
        username:
          type: string
        password:
          type: string
        version:
          type: string
        status:
          type: string
    Node:
      type: object
      properties:
        vmName:
          type: string
        computeProfileId:
          type: string
        networkProfileId:
          type: string
        newDbServerTimeZone:
          type: object
          properties: {}
        nxClusterId:
          type: string
        properties:
          type: array
          items:
            type: object
            properties: {}
    Nodes:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
        vmName:
          type: string
      description: Nodes
    OperationDefinition:
      type: object
      properties:
        entityName:
          type: string
        work:
          $ref: '#/components/schemas/TaskInfoDTO'
        stepGenEnabled:
          type: boolean
          default: false
        setStartTime:
          type: boolean
          default: false
        timeZone:
          type: string
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        type:
          type: string
        startTime:
          type: string
        timeout:
          type: integer
          format: int64
        endTime:
          type: string
        instanceId:
          type: string
        ownerId:
          type: string
        status:
          type: string
        percentageComplete:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/OperationInstance'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyValue'
        parentId:
          type: string
        parentStep:
          type: integer
          format: int32
        message:
          type: string
        systemTask:
          type: string
        metadata:
          $ref: '#/components/schemas/EraOperationMetadata'
        entityId:
          type: string
        entityType:
          type: string
        systemTriggered:
          type: boolean
          default: false
        userVisible:
          type: boolean
          default: false
        dbserverId:
          type: string
        dateSubmitted:
          type: string
        deferredBy:
          type: array
          items:
            type: string
        scheduleTime:
          type: string
        isInternal:
          type: boolean
          default: false
        childOperations:
          type: array
          items:
            $ref: '#/components/schemas/OperationDefinition'
        completed:
          type: boolean
          default: false
        userRequestedAction:
          type: string
        userRequestedActionTime:
          type: string
    OperationInstance:
      type: object
      properties:
        stepGenEnabled:
          type: boolean
          default: false
        setStartTimeValue:
          type: boolean
          default: false
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        definitionId:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        instanceId:
          type: string
        parentId:
          type: string
        level:
          type: string
        status:
          type: string
        fileId:
          type: string
        percentageComplete:
          type: string
        message:
          type: string
        sequenceNumber:
          type: integer
          format: int32
        childSteps:
          type: array
          items:
            $ref: '#/components/schemas/OperationInstance'
        weightage:
          type: integer
          format: int32
    PairStringString:
      type: object
      properties:
        first:
          type: string
        second:
          type: string
    PatchDBServerClusterModel:
      type: object
      properties:
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        softwareProfileVersionId:
          type: string
        scheduleInfo:
          $ref: '#/components/schemas/ScheduleInfo'
      example:
        actionArguments:
        - name: delete_new_database_home_on_failure
          value: "false"
        - name: delete_old_database_home_on_success
          value: "false"
        - name: working_dir
          value: /tmp
        - name: patch_type
          value: cluster_with_database
        - name: patch_execution_type
          value: non-rolling
        softwareProfileVersionId: 14f06812-59f6-4ee4-a1f9-946807b1f2fe
        scheduleInfo:
          scheduleTime: 2020-05-14 22:20:32
          timeZone: America/Los_Angeles
    PatchDBServerModel:
      type: object
      properties:
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        softwareProfileVersionId:
          type: string
        scheduleInfo:
          $ref: '#/components/schemas/ScheduleInfo'
      example:
        actionArguments:
        - name: delete_new_database_home_on_failure
          value: "false"
        - name: delete_old_database_home_on_success
          value: "false"
        - name: working_dir
          value: /tmp
        - name: patch_type
          value: database
        - name: patch_execution_type
          value: rolling
        softwareProfileVersionId: 14f06812-59f6-4ee4-a1f9-946807b1f2fe
        scheduleInfo:
          scheduleTime: 2020-05-14 22:35:47
          timeZone: America/Los_Angeles
    PerformLogCatchupModel:
      type: object
      properties:
        forRestore:
          type: boolean
          default: false
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
      description: Perform Log Catchup Model
      example:
        actionHeader:
        - name: switch_log
          value: "true"
    Properties:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PropertyValue:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        value:
          type: string
    ProvisionDBServerPhysicalClusterModel:
      type: object
      properties:
        newDbServerTimeZone:
          type: string
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        softwareProfileId:
          type: string
        databaseType:
          type: string
        name:
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        username:
          type: string
        password:
          type: string
      example:
        newDbServerTimeZone: India Standard Time
        actionArguments:
        - name: server_collation
          value: SQL_Latin1_General_CP1_CI_AS
        - name: sql_user_name
          value: username
        - name: authentication_mode
          value: windows
        - name: windows_domain_profile_id
          value: a9ab1391-5ad1-4b9f-85cd-0ca3f07dc164
        - name: sql_service_startup_account
          value: domain.fqnd/username
        - name: sql_service_startup_account_password
          value: Password@1
        - name: vm_dbserver_admin_password
          value: Password@1
        - name: cluster_name
          value: ClusterName
        softwareProfileId: 2c19fe5b-8d96-4b1d-8808-7e14bd12840e
        databaseType: sqlserver_database
        name: ClusterName
        nodes:
        - nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
          vmName: ClusterName1
          computeProfileId: 1cf318c0-339a-426b-84eb-9426645666f3
          networkProfileId: 225bdcd3-75a3-4df8-925f-d08ba7620fd2
          properties: []
        - nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
          vmName: ClusterName2
          computeProfileId: 1cf318c0-339a-426b-84eb-9426645666f3
          networkProfileId: 225bdcd3-75a3-4df8-925f-d08ba7620fd2
          properties: []
        username: Administrator
        password: Password@1
    ProvisionDatabaseModel:
      type: object
      properties:
        databaseType:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
        name:
          type: string
          example: InstanceName
        softwareProfileId:
          type: string
          example: 14c95265-ca6a-4d86-8f34-422346321997
        softwareProfileVersionId:
          type: string
          example: 3019c230-0186-4077-b59c-7342bb288987
        computeProfileId:
          type: string
        networkProfileId:
          type: string
        dbParameterProfileId:
          type: string
        newDbServerTimeZone:
          type: string
          example: Asia/Calcutta
        timeMachineInfo:
          $ref: '#/components/schemas/TimeMachineInfo'
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        createDbserver:
          type: boolean
          example: true
          default: true
        nodeCount:
          type: integer
          format: int32
        nxClusterId:
          type: string
        sshPublicKey:
          type: string
        clustered:
          type: boolean
          default: false
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Nodes'
      description: Provision Database Model
      example:
        databaseType: postgres_database
        name: InstanceName
        databaseDescription: Description
        softwareProfileId: 7f4ca84a-d2a5-4881-871b-6c19ea6bc207
        softwareProfileVersionId: 54833809-823e-4be9-a475-34cb01da9412
        computeProfileId: c1560710-ebae-4351-94e1-020209770487
        networkProfileId: e6873237-1b7f-451f-a0a7-5d8fdaacb72e
        dbParameterProfileId: 4c8ec344-a7e4-495f-9d58-3e6dddf23794
        newDbServerTimeZone: Asia/Calcutta
        timeMachineInfo:
          name: InstanceName_TM
          description: TMDescription
          slaId: 4d9dcd6d-b6f8-47f0-8015-9e691c1d3cf4
          schedule:
            snapshotTimeOfDay:
              hours: 1
              minutes: 0
              seconds: 0
            continuousSchedule:
              enabled: true
              logBackupInterval: 30
              snapshotsPerDay: 1
            weeklySchedule:
              enabled: true
              dayOfWeek: FRIDAY
            monthlySchedule:
              enabled: true
              dayOfMonth: "17"
            quartelySchedule:
              enabled: true
              startMonth: JANUARY
              dayOfMonth: "17"
            yearlySchedule:
              enabled: false
              dayOfMonth: 31
              month: DECEMBER
          tags: []
          autoTuneLogDrive: true
        actionArguments:
        - name: proxy_read_port
          value: "5001"
        - name: listener_port
          value: "5432"
        - name: proxy_write_port
          value: "5000"
        - name: database_size
          value: "10"
        - name: auto_tune_staging_drive
          value: "true"
        - name: enable_synchronous_mode
          value: "false"
        - name: backup_policy
          value: primary_only
        - name: dbserver_description
          value: DBServer Description
        - name: database_names
          value: database1
        - name: db_password
          value: Password.1
        createDbserver: true
        nodeCount: 1
        nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        sshPublicKey: SSH Public Key
        clustered: false
        nodes:
        - properties: []
          vmName: DBServerName
        autoTuneStagingDrive: true
    ProvisionNodeInfo:
      type: object
      properties:
        provision:
          type: boolean
          default: false
        dbserverId:
          type: string
        vmName:
          type: string
        newDbServerTimeZone:
          type: string
        newDbServerTimeZoneId:
          type: string
        nxClusterId:
          type: string
        nxClusterName:
          type: string
        databaseType:
          type: string
        ownerId:
          type: string
        ip:
          type: string
        computeProfileId:
          type: string
        networkProfileId:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        nxCluster:
          $ref: '#/components/schemas/ERACloudDTO'
        computeProfile:
          $ref: '#/components/schemas/ERAProfileDTO'
        networkProfile:
          $ref: '#/components/schemas/ERAProfileDTO'
        dbserver:
          $ref: '#/components/schemas/ERADBServerDTO'
    RefreshCloneModel:
      type: object
      properties:
        snapshotId:
          type: string
        pitrTimestamp:
          type: string
        latestSnapshot:
          type: boolean
          default: false
        timeZone:
          type: string
      example:
        timeZone: Asia/Calcutta
        snapshotId: b44029a4-dbc5-4c31-86d6-a9dd4354b34b
    RefreshDetails:
      type: object
      properties:
        refreshInDays:
          type: integer
          format: int32
        refreshTime:
          type: string
        refreshDateTimezone:
          type: string
    RegisterDBServerModel:
      type: object
      properties:
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        vmIp:
          type: string
        nxClusterUuid:
          type: string
        forcedInstall:
          type: boolean
          default: true
        workingDirectory:
          type: string
        databaseType:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
        username:
          type: string
        password:
          type: string
      description: Register DBServer Model
      example:
        actionArguments:
        - name: listener_port
          value: "5432"
        - name: postgres_software_home
          value: /postgres
        vmIp: 10.51.134.30
        nxClusterUuid: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        forcedInstall: true
        workingDirectory: /tmp
        databaseType: postgres_database
        username: era
        password: Password.1
    RegisterDBServerPhysicalClusterModel:
      type: object
      properties:
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        vmIp:
          type: string
        nxClusterUuid:
          type: string
        forcedInstall:
          type: boolean
          default: false
        workingDirectory:
          type: string
        databaseType:
          type: string
        name:
          type: string
        username:
          type: string
        password:
          type: string
        eraDeployBase:
          type: string
        description:
          type: string
      example:
        actionArguments:
        - name: same_as_admin
          value: true
        - name: sql_login_used
          value: false
        - name: sysadmin_username_win
          value: username
        - name: sysadmin_password_win
          value: Password@1
        vmIp: 10.51.134.52
        nxClusterUuid: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        forcedInstall: true
        workingDirectory: c:\
        databaseType: sqlserver_database
        name: ClusterNameInEra
        username: username
        password: Password@1
        eraDeployBase: c:\
        description: Description
    RegisterDatabaseModel:
      type: object
      properties:
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
        nxClusterId:
          type: string
        databaseType:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
        databaseName:
          type: string
        description:
          type: string
        clustered:
          type: boolean
          default: false
        forcedInstall:
          type: boolean
          default: false
        vmIp:
          type: string
        vmUsername:
          type: string
        vmPassword:
          type: string
        vmSshkey:
          type: string
        vmDescription:
          type: string
        autoTuneStagingDrive:
          type: boolean
          default: false
        workingDirectory:
          type: string
        timeMachineInfo:
          $ref: '#/components/schemas/TimeMachineInfo'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
      description: Register Database Model
      example:
        actionArguments:
        - name: listener_port
          value: "5432"
        - name: db_user
          value: postgres
        - name: switch_log
          value: "true"
        - name: allow_multiple_databases
          value: "true"
        - name: backup_policy
          value: prefer_secondary
        - name: postgres_software_home
          value: /postgres
        - name: vmIp
          value: 10.51.134.228
        - name: db_password
          value: Password.1
        - name: db_name
          value: postgresdb
        nxClusterId: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        databaseType: postgres_database
        databaseName: PostgresDB
        description: ""
        clustered: false
        forcedInstall: true
        vmIp: 10.51.134.228
        vmUsername: era
        vmPassword: Password.1
        vmSshkey: ""
        vmDescription: Description
        autoTuneStagingDrive: true
        workingDirectory: /tmp
        timeMachineInfo:
          autoTuneLogDrive: true
          slaId: 4d9dcd6d-b6f8-47f0-8015-9e691c1d3cf4
          schedule:
            snapshotTimeOfDay:
              hours: 1
              minutes: 0
              seconds: 0
            continuousSchedule:
              enabled: true
              logBackupInterval: 30
              snapshotsPerDay: 1
            weeklySchedule:
              enabled: true
              dayOfWeek: FRIDAY
            monthlySchedule:
              enabled: true
              dayOfMonth: "17"
            quartelySchedule:
              enabled: true
              startMonth: JANUARY
              dayOfMonth: "17"
            yearlySchedule:
              enabled: false
              dayOfMonth: 31
              month: DECEMBER
          tags: []
          name: PostgresDB_TM
          description: TMDescription
        tags: []
    RemoveIPPoolModel:
      type: object
      properties:
        ipPools:
          type: array
          items:
            $ref: '#/components/schemas/RemoveIpPools'
    RemoveIpPools:
      type: object
      properties:
        id:
          type: string
    ResourceConfig:
      type: object
      properties:
        storageThresholdPercentage:
          type: integer
          format: int32
        memoryThresholdPercentage:
          type: integer
          format: int32
    RestoreDatabaseModel:
      type: object
      properties:
        snapshotId:
          type: string
        latestSnapshot:
          type: boolean
          default: false
        userPitrTimestamp:
          type: string
        timeZone:
          type: string
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ActionArguments'
      example:
        snapshotId: d3bf21ae-744c-49d7-917e-646acc0aec82
        timeZone: Asia/Calcutta
        actionArguments:
        - name: sameLocation
          value: "false"
        - name: newLocationPath
          value: C:\NTNX\ERA_BASE\ERA_RESTORED_MOUNT
    ResultSet:
      type: object
      properties:
        type:
          type: integer
          format: int32
        metaData:
          $ref: '#/components/schemas/ResultSetMetaData'
        warnings:
          $ref: '#/components/schemas/SQLWarning'
        holdability:
          type: integer
          format: int32
        first:
          type: boolean
          default: false
        statement:
          $ref: '#/components/schemas/Statement'
        closed:
          type: boolean
          default: false
        cursorName:
          type: string
        beforeFirst:
          type: boolean
          default: false
        afterLast:
          type: boolean
          default: false
        last:
          type: boolean
          default: false
        row:
          type: integer
          format: int32
        concurrency:
          type: integer
          format: int32
        fetchDirection:
          type: integer
          format: int32
        fetchSize:
          type: integer
          format: int32
    ResultSetMetaData:
      type: object
      properties:
        columnCount:
          type: integer
          format: int32
    SQLException:
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        sqlstate:
          type: string
        errorCode:
          type: integer
          format: int32
        message:
          type: string
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
    SQLWarning:
      type: object
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        sqlstate:
          type: string
        nextException:
          $ref: '#/components/schemas/SQLException'
        errorCode:
          type: integer
          format: int32
        message:
          type: string
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
    Schedule:
      type: object
      properties:
        snapshotTimeOfDay:
          $ref: '#/components/schemas/SnapshotTimeOfDay'
        continuousSchedule:
          $ref: '#/components/schemas/EraContinuousSchedule'
        weeklySchedule:
          $ref: '#/components/schemas/EraWeeklySchedule'
        monthlySchedule:
          $ref: '#/components/schemas/EraMonthlySchedule'
        quartelySchedule:
          $ref: '#/components/schemas/EraQuarterlySchedule'
        yearlySchedule:
          $ref: '#/components/schemas/EraYearlySchedule'
      description: Schedule Model
    ScheduleInfo:
      type: object
      properties:
        scheduleTime:
          type: string
        timeZone:
          type: string
    SnapshotLCMConfig:
      type: object
      properties:
        expiryDetails:
          $ref: '#/components/schemas/ExpiryDetails'
    SnapshotTimeOfDay:
      type: object
      properties:
        hours:
          type: integer
          format: int32
        minutes:
          type: integer
          format: int32
        seconds:
          type: integer
          format: int32
      description: Snapshot Time Of Day
    StackTraceElement:
      type: object
      properties:
        classLoaderName:
          type: string
        moduleName:
          type: string
        moduleVersion:
          type: string
        methodName:
          type: string
        fileName:
          type: string
        lineNumber:
          type: integer
          format: int32
        nativeMethod:
          type: boolean
          default: false
        className:
          type: string
    Statement:
      type: object
      properties:
        warnings:
          $ref: '#/components/schemas/SQLWarning'
        closed:
          type: boolean
          default: false
        maxFieldSize:
          type: integer
          format: int32
        maxRows:
          type: integer
          format: int32
        queryTimeout:
          type: integer
          format: int32
        updateCount:
          type: integer
          format: int32
        moreResults:
          type: boolean
          default: false
        fetchDirection:
          type: integer
          format: int32
        fetchSize:
          type: integer
          format: int32
        resultSetConcurrency:
          type: integer
          format: int32
        resultSetType:
          type: integer
          format: int32
        resultSetHoldability:
          type: integer
          format: int32
        poolable:
          type: boolean
          default: false
        closeOnCompletion:
          type: boolean
          default: false
        largeUpdateCount:
          type: integer
          format: int64
        largeMaxRows:
          type: integer
          format: int64
    TagModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          enum:
          - DATABASE
          - TIME_MACHINE
          - CLONE
          - DATABASE_SERVER
        required:
          type: boolean
          default: false
        entityType:
          type: string
        status:
          type: string
          enum:
          - ENABLED
          - DEPRECATED
      example:
        name: Project
        description: Project number
        entityType: DATABASE
        required: true
        status: ENABLED
    Tags:
      type: object
      properties:
        tagId:
          type: string
        value:
          type: string
    TakeSnapshotModel:
      type: object
      properties:
        name:
          type: string
        lcmConfig:
          $ref: '#/components/schemas/LcmConfig'
      description: Take Snapshot Model
      example:
        name: Snapshot1
        lcmConfig:
          snapshotLCMConfig:
            expiryDetails:
              expiryDateTimezone: Asia/Calcutta
              expireInDays: 10
    TaskInfoDTO:
      type: object
      properties:
        ownerId:
          type: string
        userDTO:
          $ref: '#/components/schemas/ERAUser'
        connection:
          $ref: '#/components/schemas/Connection'
        timeZone:
          type: string
        actionHeader:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        actionArguments:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        payload:
          type: object
          properties: {}
        parentOperation:
          $ref: '#/components/schemas/EraParentOperationDTO'
        parentWorkId:
          type: string
        parentStepIndex:
          type: integer
          format: int32
        id:
          type: string
        name:
          type: string
        type:
          type: string
        applicationType:
          type: string
        hostId:
          type: string
        clientId:
          type: string
        applicationId:
          type: string
        systemCreated:
          type: boolean
          default: false
        entityId:
          type: string
        entityName:
          type: string
        entityType:
          type: string
        submissionDate:
          type: string
        expiryDate:
          type: string
        status:
          type: string
        operationId:
          type: string
        parentId:
          type: string
        parentOpStep:
          type: integer
          format: int32
        submittedForOwnerId:
          type: string
        priority:
          type: integer
          format: int32
        message:
          type: string
        statusName:
          type: string
        verboseLevel:
          type: integer
          format: int32
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ERAPropertyValue'
        operationDefinition:
          $ref: '#/components/schemas/OperationDefinition'
        stepGenEnabled:
          type: boolean
          default: false
        deferredBy:
          type: string
        isEraCreated:
          type: boolean
          default: false
        isInternal:
          type: boolean
          default: false
        scheduleTime:
          type: string
        scheduleInfo:
          $ref: '#/components/schemas/ScheduleInfo'
        lcmConfig:
          $ref: '#/components/schemas/EraLCMConfigDTO'
        dependencyReport:
          $ref: '#/components/schemas/EraDependencyReport'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EraTagValueDTO'
        skipDriverArgumentValidations:
          type: boolean
          default: false
    TaskInfoSummary:
      type: object
      properties:
        name:
          type: string
        workId:
          type: string
        operationId:
          type: string
        dbserverId:
          type: string
        message:
          type: string
        entityId:
          type: string
        entityName:
          type: string
        entityType:
          type: string
        status:
          type: string
        associatedOperations:
          type: array
          items:
            $ref: '#/components/schemas/TaskInfoSummary'
    Throwable:
      type: object
      properties:
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/StackTraceElement'
        message:
          type: string
        suppressed:
          type: array
          items:
            type: string
        localizedMessage:
          type: string
    TimeMachineInfo:
      type: object
      properties:
        name:
          type: string
          example: InstanceName_TM
        description:
          type: string
        slaId:
          type: string
          example: 4d9dcd6d-b6f8-47f0-8015-9e691c1d3cf4
        schedule:
          $ref: '#/components/schemas/Schedule'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        autoTuneLogDrive:
          type: boolean
          default: false
      description: Time Machine Info
    TimeMachinePauseModel:
      type: object
      properties:
        forced:
          type: boolean
          default: false
        reason:
          type: string
        ownerId:
          type: string
      description: Time Machine Pause Model
    TimeMachineResumeModel:
      type: object
      properties:
        resetCapability:
          type: boolean
          default: false
        skipSnapshot:
          type: boolean
          default: false
        skipLogCatchup:
          type: boolean
          default: false
        reason:
          type: string
        ownerId:
          type: string
        snapshotName:
          type: string
      description: Time Machine Resume Model
    UpdateAlertModel:
      type: object
      properties:
        id:
          type: string
        resetResolved:
          type: boolean
          default: false
        resolved:
          type: boolean
          default: false
        acknowledged:
          type: boolean
          default: false
        resetAcknowledged:
          type: boolean
          default: false
      description: Update Alert Model
    UpdateCloneModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        resetName:
          type: boolean
          default: false
        resetDescription:
          type: boolean
          default: false
        resetTags:
          type: boolean
          default: false
      example:
        name: CloneName
        description: Description
        tags: []
        resetName: true
        resetDescription: true
        resetTags: true
    UpdateClusterModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uniqueName:
          type: string
        ipAddresses:
          type: array
          items:
            type: string
        fqdns:
          type: array
          items:
            type: string
        description:
          type: string
        cloudType:
          type: string
        dateCreated:
          type: string
        dateModified:
          type: string
        ownerId:
          type: string
        status:
          type: string
        version:
          type: string
        hypervisorType:
          type: string
        hypervisorVersion:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ClusterProperties'
        referenceCount:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        cloudInfo:
          $ref: '#/components/schemas/CloudInfo'
        resourceConfig:
          $ref: '#/components/schemas/ResourceConfig'
        managementServerInfo:
          $ref: '#/components/schemas/ManagementServerInfo'
        ip:
          type: string
      example:
        id: c9c355b8-018b-46f3-9c7e-629c5db7c41d
        name: EraCluster
        uniqueName: ERACLUSTER
        ipAddresses:
        - 10.46.211.195
        description: Description
        cloudType: NTNX
        dateCreated: 2020-03-31 05:11:40.622273
        dateModified: 2020-03-31 05:12:25.754656
        ownerId: eac70dbf-22fb-462b-9498-949796ca1f73
        status: UP
        version: v2
        hypervisorType: ESX
        hypervisorVersion: "5.11"
        properties:
        - name: ERA_STORAGE_CONTAINER
          value: default-container-79898
          secure: false
        - name: RESOURCE_CONFIG
          value: "{\"storageThresholdPercentage\":95.0,\"memoryThresholdPercentage\"\
            :95.0}"
          secure: false
        referenceCount: 0
        username: admin
        password: Password@1
        resourceConfig:
          storageThresholdPercentage: 95
          memoryThresholdPercentage: 95
        managementServerInfo:
          ip: 10.51.54.21
          username: username
          password: Password@1
          status: READY
        ip: 10.46.211.195
    UpdateDatabaseModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        resetName:
          type: boolean
          default: true
        resetDescription:
          type: boolean
          default: true
        resetTags:
          type: boolean
          default: true
      example:
        name: Database_Name
        description: Description
        tags: []
        resetName: true
        resetDescription: true
        resetTags: true
    UpdateDBServerClusterModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        resetName:
          type: boolean
          default: false
        resetDescription:
          type: boolean
          default: false
        resetTags:
          type: boolean
          default: false
      example:
        name: DBServerClusterName
        description: Server Cluster for DB DatabaseName
        tags: []
        resetName: true
        resetDescription: true
        resetTags: true
    UpdateDBServerModel:
      type: object
      properties:
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
      example:
        description: Server Cluster for DB DatabaseName
        tags:
        - tagId: ddf6d949-4ecf-4d4b-bd69-b8372ffe8017
          value: tagValue
    UpdatePolicyByIDModel:
      type: object
      properties:
        id:
          type: string
        severity:
          type: string
        enabled:
          type: boolean
          default: false
        resetEnabled:
          type: boolean
          default: false
        resetSeverity:
          type: boolean
          default: false
        dateCreated:
          type: string
          example: 2018-16-04 11:09:52
        dateModified:
          type: string
          example: 2018-16-04 11:09:52
      description: Update Policy By Model
    UpdateProfileModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
      example:
        name: SoftwareProfileForDemo
        description: Description
    UpdateProfileVersionModel:
      type: object
      properties:
        engineType:
          type: string
          enum:
          - oracle_database
          - postgres_database
          - sqlserver_database
          - mariadb_database
          - mysql_database
          - saphana_database
          - mongodb_database
        type:
          type: string
        dbVersion:
          type: string
        systemProfile:
          type: boolean
          default: false
        published:
          type: boolean
          default: false
        deprecated:
          type: boolean
          default: false
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
        name:
          type: string
        description:
          type: string
      example:
        name: static_vlan (1.0)
        description: Description
        published: true
        properties:
        - name: VLAN_NAME
          value: vlan650
          secure: false
          description: Name of the vLAN
    UpdateTimeMachineModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
        slaId:
          type: string
        schedule:
          $ref: '#/components/schemas/Schedule'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tags'
        scheduleId:
          type: string
        resetName:
          type: boolean
          default: false
        resetDescription:
          type: boolean
          default: false
        resetSla:
          type: boolean
          default: false
        resetSchedule:
          type: boolean
          default: false
      description: Update Time Machine Model
      example:
        name: database1_TM
        description: Time Machine for database 'database1'
        id: 64a5d349-3f9e-4789-82df-2e02cfc79e31
        slaId: 501361d9-db5e-47af-8102-ff9354b9bd81
        schedule:
          snapshotTimeOfDay:
            hours: 2
            minutes: 0
            seconds: 0
          continuousSchedule:
            enabled: true
            logBackupInterval: 30
            snapshotsPerDay: 2
          weeklySchedule:
            enabled: true
            dayOfWeek: WEDNESDAY
          monthlySchedule:
            enabled: true
            dayOfMonth: "10"
          quartelySchedule:
            enabled: true
            startMonth: FEBRUARY
            dayOfMonth: "10"
          yearlySchedule:
            enabled: false
            dayOfMonth: 31
            month: DECEMBER
        tags: []
        scheduleId: ed586bba-c81e-47c2-8676-59ca6d9be5de
        resetName: true
        resetDescription: true
        resetSla: true
        resetSchedule: true
  securitySchemes:
    era_token:
      type: apiKey
      description: NDB token
      name: Authorization
      in: header
    era_auth:
      type: http
      description: NDB username and password
      scheme: basic
x-original-swagger-version: "2.0"
